
accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003684  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003740  08003740  00013740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037e0  080037e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037e8  080037e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037e8  080037e8  000137e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037ec  080037ec  000137ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  080037fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  080037fc  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ddc0  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001efd  00000000  00000000  0002de37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b28  00000000  00000000  0002fd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008bb  00000000  00000000  00030860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018133  00000000  00000000  0003111b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f5cb  00000000  00000000  0004924e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099474  00000000  00000000  00058819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027c8  00000000  00000000  000f1c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f4458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003728 	.word	0x08003728

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003728 	.word	0x08003728

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	d434      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000476:	469b      	mov	fp, r3
 8000478:	4653      	mov	r3, sl
 800047a:	465a      	mov	r2, fp
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83b      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e079      	b.n	8000586 <__udivmoddi4+0x146>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e076      	b.n	800058c <__udivmoddi4+0x14c>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e029      	b.n	800050c <__udivmoddi4+0xcc>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	469b      	mov	fp, r3
 80004e4:	2320      	movs	r3, #32
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	40da      	lsrs	r2, r3
 80004ec:	4641      	mov	r1, r8
 80004ee:	0013      	movs	r3, r2
 80004f0:	464a      	mov	r2, r9
 80004f2:	408a      	lsls	r2, r1
 80004f4:	0017      	movs	r7, r2
 80004f6:	4642      	mov	r2, r8
 80004f8:	431f      	orrs	r7, r3
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001e      	movs	r6, r3
 8000500:	42af      	cmp	r7, r5
 8000502:	d9c3      	bls.n	800048c <__udivmoddi4+0x4c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	4643      	mov	r3, r8
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0d8      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000512:	07fb      	lsls	r3, r7, #31
 8000514:	0872      	lsrs	r2, r6, #1
 8000516:	431a      	orrs	r2, r3
 8000518:	4646      	mov	r6, r8
 800051a:	087b      	lsrs	r3, r7, #1
 800051c:	e00e      	b.n	800053c <__udivmoddi4+0xfc>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d101      	bne.n	8000526 <__udivmoddi4+0xe6>
 8000522:	42a2      	cmp	r2, r4
 8000524:	d80c      	bhi.n	8000540 <__udivmoddi4+0x100>
 8000526:	1aa4      	subs	r4, r4, r2
 8000528:	419d      	sbcs	r5, r3
 800052a:	2001      	movs	r0, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2100      	movs	r1, #0
 8000532:	3e01      	subs	r6, #1
 8000534:	1824      	adds	r4, r4, r0
 8000536:	414d      	adcs	r5, r1
 8000538:	2e00      	cmp	r6, #0
 800053a:	d006      	beq.n	800054a <__udivmoddi4+0x10a>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d9ee      	bls.n	800051e <__udivmoddi4+0xde>
 8000540:	3e01      	subs	r6, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2e00      	cmp	r6, #0
 8000548:	d1f8      	bne.n	800053c <__udivmoddi4+0xfc>
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	465b      	mov	r3, fp
 8000550:	1900      	adds	r0, r0, r4
 8000552:	4169      	adcs	r1, r5
 8000554:	2b00      	cmp	r3, #0
 8000556:	db24      	blt.n	80005a2 <__udivmoddi4+0x162>
 8000558:	002b      	movs	r3, r5
 800055a:	465a      	mov	r2, fp
 800055c:	4644      	mov	r4, r8
 800055e:	40d3      	lsrs	r3, r2
 8000560:	002a      	movs	r2, r5
 8000562:	40e2      	lsrs	r2, r4
 8000564:	001c      	movs	r4, r3
 8000566:	465b      	mov	r3, fp
 8000568:	0015      	movs	r5, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	db2a      	blt.n	80005c4 <__udivmoddi4+0x184>
 800056e:	0026      	movs	r6, r4
 8000570:	409e      	lsls	r6, r3
 8000572:	0033      	movs	r3, r6
 8000574:	0026      	movs	r6, r4
 8000576:	4647      	mov	r7, r8
 8000578:	40be      	lsls	r6, r7
 800057a:	0032      	movs	r2, r6
 800057c:	1a80      	subs	r0, r0, r2
 800057e:	4199      	sbcs	r1, r3
 8000580:	9000      	str	r0, [sp, #0]
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	e79e      	b.n	80004c4 <__udivmoddi4+0x84>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d8bc      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800058a:	e782      	b.n	8000492 <__udivmoddi4+0x52>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	2100      	movs	r1, #0
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	2200      	movs	r2, #0
 8000596:	9100      	str	r1, [sp, #0]
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	40da      	lsrs	r2, r3
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	e785      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	4646      	mov	r6, r8
 80005ac:	409a      	lsls	r2, r3
 80005ae:	0023      	movs	r3, r4
 80005b0:	40f3      	lsrs	r3, r6
 80005b2:	4644      	mov	r4, r8
 80005b4:	4313      	orrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dad4      	bge.n	800056e <__udivmoddi4+0x12e>
 80005c4:	4642      	mov	r2, r8
 80005c6:	002f      	movs	r7, r5
 80005c8:	2320      	movs	r3, #32
 80005ca:	0026      	movs	r6, r4
 80005cc:	4097      	lsls	r7, r2
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	40de      	lsrs	r6, r3
 80005d2:	003b      	movs	r3, r7
 80005d4:	4333      	orrs	r3, r6
 80005d6:	e7cd      	b.n	8000574 <__udivmoddi4+0x134>

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	0008      	movs	r0, r1
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f000 fae3 	bl	8000bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 f85f 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063a:	f000 f933 	bl	80008a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063e:	f000 f8e3 	bl	8000808 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000642:	f000 f8a1 	bl	8000788 <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

	  // Reset LEDs
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000646:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <main+0xb8>)
 8000648:	2200      	movs	r2, #0
 800064a:	2108      	movs	r1, #8
 800064c:	0018      	movs	r0, r3
 800064e:	f000 fdad 	bl	80011ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000652:	23a0      	movs	r3, #160	; 0xa0
 8000654:	05db      	lsls	r3, r3, #23
 8000656:	2200      	movs	r2, #0
 8000658:	2120      	movs	r1, #32
 800065a:	0018      	movs	r0, r3
 800065c:	f000 fda6 	bl	80011ac <HAL_GPIO_WritePin>

	  // Tell MMA that we want to read from the identification register
	  buf[0] = WHO_AM_I;
 8000660:	003b      	movs	r3, r7
 8000662:	220d      	movs	r2, #13
 8000664:	701a      	strb	r2, [r3, #0]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, WHO_AM_I, buf, 1, HAL_MAX_DELAY);
 8000666:	250f      	movs	r5, #15
 8000668:	197c      	adds	r4, r7, r5
 800066a:	003a      	movs	r2, r7
 800066c:	481e      	ldr	r0, [pc, #120]	; (80006e8 <main+0xbc>)
 800066e:	2301      	movs	r3, #1
 8000670:	425b      	negs	r3, r3
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	2301      	movs	r3, #1
 8000676:	210d      	movs	r1, #13
 8000678:	f000 fe5c 	bl	8001334 <HAL_I2C_Master_Transmit>
 800067c:	0003      	movs	r3, r0
 800067e:	7023      	strb	r3, [r4, #0]

	  if ( ret != 0x2A )	// WHO_AM_I should always be 0x2A
 8000680:	197b      	adds	r3, r7, r5
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b2a      	cmp	r3, #42	; 0x2a
 8000686:	d00e      	beq.n	80006a6 <main+0x7a>
	  {
		  strcpy((char*)buf, "Error Tx\r\n");
 8000688:	003b      	movs	r3, r7
 800068a:	4a18      	ldr	r2, [pc, #96]	; (80006ec <main+0xc0>)
 800068c:	ca03      	ldmia	r2!, {r0, r1}
 800068e:	c303      	stmia	r3!, {r0, r1}
 8000690:	8811      	ldrh	r1, [r2, #0]
 8000692:	8019      	strh	r1, [r3, #0]
 8000694:	7892      	ldrb	r2, [r2, #2]
 8000696:	709a      	strb	r2, [r3, #2]
		  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <main+0xb8>)
 800069a:	2201      	movs	r2, #1
 800069c:	2108      	movs	r1, #8
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 fd84 	bl	80011ac <HAL_GPIO_WritePin>
 80006a4:	e00c      	b.n	80006c0 <main+0x94>
	  } else {
		  strcpy((char*)buf, "Success\r\n");
 80006a6:	003b      	movs	r3, r7
 80006a8:	4a11      	ldr	r2, [pc, #68]	; (80006f0 <main+0xc4>)
 80006aa:	ca03      	ldmia	r2!, {r0, r1}
 80006ac:	c303      	stmia	r3!, {r0, r1}
 80006ae:	8812      	ldrh	r2, [r2, #0]
 80006b0:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80006b2:	23a0      	movs	r3, #160	; 0xa0
 80006b4:	05db      	lsls	r3, r3, #23
 80006b6:	2201      	movs	r2, #1
 80006b8:	2120      	movs	r1, #32
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 fd76 	bl	80011ac <HAL_GPIO_WritePin>
	  }

	 // Send out buffer (temperature or error message)
	 HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80006c0:	003b      	movs	r3, r7
 80006c2:	0018      	movs	r0, r3
 80006c4:	f7ff fd1e 	bl	8000104 <strlen>
 80006c8:	0003      	movs	r3, r0
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	2301      	movs	r3, #1
 80006ce:	425b      	negs	r3, r3
 80006d0:	0039      	movs	r1, r7
 80006d2:	4808      	ldr	r0, [pc, #32]	; (80006f4 <main+0xc8>)
 80006d4:	f002 f94c 	bl	8002970 <HAL_UART_Transmit>

	 // Wait
	 HAL_Delay(500);
 80006d8:	23fa      	movs	r3, #250	; 0xfa
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	0018      	movs	r0, r3
 80006de:	f000 fb13 	bl	8000d08 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80006e2:	e7b0      	b.n	8000646 <main+0x1a>
 80006e4:	50000400 	.word	0x50000400
 80006e8:	20000028 	.word	0x20000028
 80006ec:	08003740 	.word	0x08003740
 80006f0:	0800374c 	.word	0x0800374c
 80006f4:	2000007c 	.word	0x2000007c

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b093      	sub	sp, #76	; 0x4c
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	2410      	movs	r4, #16
 8000700:	193b      	adds	r3, r7, r4
 8000702:	0018      	movs	r0, r3
 8000704:	2338      	movs	r3, #56	; 0x38
 8000706:	001a      	movs	r2, r3
 8000708:	2100      	movs	r1, #0
 800070a:	f002 ffe1 	bl	80036d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070e:	003b      	movs	r3, r7
 8000710:	0018      	movs	r0, r3
 8000712:	2310      	movs	r3, #16
 8000714:	001a      	movs	r2, r3
 8000716:	2100      	movs	r1, #0
 8000718:	f002 ffda 	bl	80036d0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	0018      	movs	r0, r3
 8000722:	f001 fa07 	bl	8001b34 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000726:	193b      	adds	r3, r7, r4
 8000728:	2202      	movs	r2, #2
 800072a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	193b      	adds	r3, r7, r4
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	0052      	lsls	r2, r2, #1
 8000732:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2240      	movs	r2, #64	; 0x40
 800073e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000740:	193b      	adds	r3, r7, r4
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	193b      	adds	r3, r7, r4
 8000748:	0018      	movs	r0, r3
 800074a:	f001 fa3f 	bl	8001bcc <HAL_RCC_OscConfig>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000752:	f000 f91d 	bl	8000990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	003b      	movs	r3, r7
 8000758:	2207      	movs	r2, #7
 800075a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800075c:	003b      	movs	r3, r7
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	003b      	movs	r3, r7
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000768:	003b      	movs	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800076e:	003b      	movs	r3, r7
 8000770:	2100      	movs	r1, #0
 8000772:	0018      	movs	r0, r3
 8000774:	f001 fd44 	bl	8002200 <HAL_RCC_ClockConfig>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800077c:	f000 f908 	bl	8000990 <Error_Handler>
  }
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	b013      	add	sp, #76	; 0x4c
 8000786:	bd90      	pop	{r4, r7, pc}

08000788 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_I2C1_Init+0x74>)
 800078e:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <MX_I2C1_Init+0x78>)
 8000790:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000792:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_I2C1_Init+0x74>)
 8000794:	4a1b      	ldr	r2, [pc, #108]	; (8000804 <MX_I2C1_Init+0x7c>)
 8000796:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_I2C1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_I2C1_Init+0x74>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_I2C1_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_I2C1_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_I2C1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_I2C1_Init+0x74>)
 80007c4:	0018      	movs	r0, r3
 80007c6:	f000 fd0f 	bl	80011e8 <HAL_I2C_Init>
 80007ca:	1e03      	subs	r3, r0, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ce:	f000 f8df 	bl	8000990 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_I2C1_Init+0x74>)
 80007d4:	2100      	movs	r1, #0
 80007d6:	0018      	movs	r0, r3
 80007d8:	f001 f914 	bl	8001a04 <HAL_I2CEx_ConfigAnalogFilter>
 80007dc:	1e03      	subs	r3, r0, #0
 80007de:	d001      	beq.n	80007e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007e0:	f000 f8d6 	bl	8000990 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <MX_I2C1_Init+0x74>)
 80007e6:	2100      	movs	r1, #0
 80007e8:	0018      	movs	r0, r3
 80007ea:	f001 f957 	bl	8001a9c <HAL_I2CEx_ConfigDigitalFilter>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007f2:	f000 f8cd 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000028 	.word	0x20000028
 8000800:	40005400 	.word	0x40005400
 8000804:	00303d5b 	.word	0x00303d5b

08000808 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800080c:	4b23      	ldr	r3, [pc, #140]	; (800089c <MX_USART2_UART_Init+0x94>)
 800080e:	4a24      	ldr	r2, [pc, #144]	; (80008a0 <MX_USART2_UART_Init+0x98>)
 8000810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000812:	4b22      	ldr	r3, [pc, #136]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000814:	22e1      	movs	r2, #225	; 0xe1
 8000816:	0252      	lsls	r2, r2, #9
 8000818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b20      	ldr	r3, [pc, #128]	; (800089c <MX_USART2_UART_Init+0x94>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000826:	4b1d      	ldr	r3, [pc, #116]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <MX_USART2_UART_Init+0x94>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_USART2_UART_Init+0x94>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_USART2_UART_Init+0x94>)
 800084c:	2200      	movs	r2, #0
 800084e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000852:	0018      	movs	r0, r3
 8000854:	f002 f836 	bl	80028c4 <HAL_UART_Init>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d001      	beq.n	8000860 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800085c:	f000 f898 	bl	8000990 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000862:	2100      	movs	r1, #0
 8000864:	0018      	movs	r0, r3
 8000866:	f002 fe53 	bl	8003510 <HAL_UARTEx_SetTxFifoThreshold>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800086e:	f000 f88f 	bl	8000990 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000874:	2100      	movs	r1, #0
 8000876:	0018      	movs	r0, r3
 8000878:	f002 fe8a 	bl	8003590 <HAL_UARTEx_SetRxFifoThreshold>
 800087c:	1e03      	subs	r3, r0, #0
 800087e:	d001      	beq.n	8000884 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000880:	f000 f886 	bl	8000990 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <MX_USART2_UART_Init+0x94>)
 8000886:	0018      	movs	r0, r3
 8000888:	f002 fe08 	bl	800349c <HAL_UARTEx_DisableFifoMode>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d001      	beq.n	8000894 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000890:	f000 f87e 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	2000007c 	.word	0x2000007c
 80008a0:	40004400 	.word	0x40004400

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b08b      	sub	sp, #44	; 0x2c
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	2414      	movs	r4, #20
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	0018      	movs	r0, r3
 80008b0:	2314      	movs	r3, #20
 80008b2:	001a      	movs	r2, r3
 80008b4:	2100      	movs	r1, #0
 80008b6:	f002 ff0b 	bl	80036d0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	4b33      	ldr	r3, [pc, #204]	; (8000988 <MX_GPIO_Init+0xe4>)
 80008bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008be:	4b32      	ldr	r3, [pc, #200]	; (8000988 <MX_GPIO_Init+0xe4>)
 80008c0:	2104      	movs	r1, #4
 80008c2:	430a      	orrs	r2, r1
 80008c4:	635a      	str	r2, [r3, #52]	; 0x34
 80008c6:	4b30      	ldr	r3, [pc, #192]	; (8000988 <MX_GPIO_Init+0xe4>)
 80008c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ca:	2204      	movs	r2, #4
 80008cc:	4013      	ands	r3, r2
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008d2:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <MX_GPIO_Init+0xe4>)
 80008d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008d6:	4b2c      	ldr	r3, [pc, #176]	; (8000988 <MX_GPIO_Init+0xe4>)
 80008d8:	2120      	movs	r1, #32
 80008da:	430a      	orrs	r2, r1
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
 80008de:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <MX_GPIO_Init+0xe4>)
 80008e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008e2:	2220      	movs	r2, #32
 80008e4:	4013      	ands	r3, r2
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b27      	ldr	r3, [pc, #156]	; (8000988 <MX_GPIO_Init+0xe4>)
 80008ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ee:	4b26      	ldr	r3, [pc, #152]	; (8000988 <MX_GPIO_Init+0xe4>)
 80008f0:	2101      	movs	r1, #1
 80008f2:	430a      	orrs	r2, r1
 80008f4:	635a      	str	r2, [r3, #52]	; 0x34
 80008f6:	4b24      	ldr	r3, [pc, #144]	; (8000988 <MX_GPIO_Init+0xe4>)
 80008f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008fa:	2201      	movs	r2, #1
 80008fc:	4013      	ands	r3, r2
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	4b21      	ldr	r3, [pc, #132]	; (8000988 <MX_GPIO_Init+0xe4>)
 8000904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000906:	4b20      	ldr	r3, [pc, #128]	; (8000988 <MX_GPIO_Init+0xe4>)
 8000908:	2102      	movs	r1, #2
 800090a:	430a      	orrs	r2, r1
 800090c:	635a      	str	r2, [r3, #52]	; 0x34
 800090e:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <MX_GPIO_Init+0xe4>)
 8000910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000912:	2202      	movs	r2, #2
 8000914:	4013      	ands	r3, r2
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800091a:	23a0      	movs	r3, #160	; 0xa0
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	2200      	movs	r2, #0
 8000920:	2120      	movs	r1, #32
 8000922:	0018      	movs	r0, r3
 8000924:	f000 fc42 	bl	80011ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_GREENB4_Pin, GPIO_PIN_RESET);
 8000928:	4b18      	ldr	r3, [pc, #96]	; (800098c <MX_GPIO_Init+0xe8>)
 800092a:	2200      	movs	r2, #0
 800092c:	2118      	movs	r1, #24
 800092e:	0018      	movs	r0, r3
 8000930:	f000 fc3c 	bl	80011ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000934:	193b      	adds	r3, r7, r4
 8000936:	2220      	movs	r2, #32
 8000938:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	193b      	adds	r3, r7, r4
 800093c:	2201      	movs	r2, #1
 800093e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	193b      	adds	r3, r7, r4
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000946:	193b      	adds	r3, r7, r4
 8000948:	2202      	movs	r2, #2
 800094a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800094c:	193a      	adds	r2, r7, r4
 800094e:	23a0      	movs	r3, #160	; 0xa0
 8000950:	05db      	lsls	r3, r3, #23
 8000952:	0011      	movs	r1, r2
 8000954:	0018      	movs	r0, r3
 8000956:	f000 fac5 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREENB4_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREENB4_Pin;
 800095a:	0021      	movs	r1, r4
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2218      	movs	r2, #24
 8000960:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2201      	movs	r2, #1
 8000966:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	187b      	adds	r3, r7, r1
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <MX_GPIO_Init+0xe8>)
 8000978:	0019      	movs	r1, r3
 800097a:	0010      	movs	r0, r2
 800097c:	f000 fab2 	bl	8000ee4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	b00b      	add	sp, #44	; 0x2c
 8000986:	bd90      	pop	{r4, r7, pc}
 8000988:	40021000 	.word	0x40021000
 800098c:	50000400 	.word	0x50000400

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	e7fe      	b.n	8000998 <Error_Handler+0x8>
	...

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HAL_MspInit+0x4c>)
 80009a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <HAL_MspInit+0x4c>)
 80009a8:	2101      	movs	r1, #1
 80009aa:	430a      	orrs	r2, r1
 80009ac:	641a      	str	r2, [r3, #64]	; 0x40
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	2201      	movs	r2, #1
 80009b4:	4013      	ands	r3, r2
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_MspInit+0x4c>)
 80009bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <HAL_MspInit+0x4c>)
 80009c0:	2180      	movs	r1, #128	; 0x80
 80009c2:	0549      	lsls	r1, r1, #21
 80009c4:	430a      	orrs	r2, r1
 80009c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <HAL_MspInit+0x4c>)
 80009ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	055b      	lsls	r3, r3, #21
 80009d0:	4013      	ands	r3, r2
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80009d6:	23c0      	movs	r3, #192	; 0xc0
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 f9b8 	bl	8000d50 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b002      	add	sp, #8
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40021000 	.word	0x40021000

080009ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b097      	sub	sp, #92	; 0x5c
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	2344      	movs	r3, #68	; 0x44
 80009f6:	18fb      	adds	r3, r7, r3
 80009f8:	0018      	movs	r0, r3
 80009fa:	2314      	movs	r3, #20
 80009fc:	001a      	movs	r2, r3
 80009fe:	2100      	movs	r1, #0
 8000a00:	f002 fe66 	bl	80036d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a04:	2410      	movs	r4, #16
 8000a06:	193b      	adds	r3, r7, r4
 8000a08:	0018      	movs	r0, r3
 8000a0a:	2334      	movs	r3, #52	; 0x34
 8000a0c:	001a      	movs	r2, r3
 8000a0e:	2100      	movs	r1, #0
 8000a10:	f002 fe5e 	bl	80036d0 <memset>
  if(hi2c->Instance==I2C1)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a22      	ldr	r2, [pc, #136]	; (8000aa4 <HAL_I2C_MspInit+0xb8>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d13e      	bne.n	8000a9c <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	2220      	movs	r2, #32
 8000a22:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f001 fd91 	bl	8002554 <HAL_RCCEx_PeriphCLKConfig>
 8000a32:	1e03      	subs	r3, r0, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a36:	f7ff ffab 	bl	8000990 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <HAL_I2C_MspInit+0xbc>)
 8000a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <HAL_I2C_MspInit+0xbc>)
 8000a40:	2102      	movs	r1, #2
 8000a42:	430a      	orrs	r2, r1
 8000a44:	635a      	str	r2, [r3, #52]	; 0x34
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <HAL_I2C_MspInit+0xbc>)
 8000a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a52:	2144      	movs	r1, #68	; 0x44
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	22c0      	movs	r2, #192	; 0xc0
 8000a58:	0092      	lsls	r2, r2, #2
 8000a5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2212      	movs	r2, #18
 8000a60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2206      	movs	r2, #6
 8000a72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	4a0d      	ldr	r2, [pc, #52]	; (8000aac <HAL_I2C_MspInit+0xc0>)
 8000a78:	0019      	movs	r1, r3
 8000a7a:	0010      	movs	r0, r2
 8000a7c:	f000 fa32 	bl	8000ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <HAL_I2C_MspInit+0xbc>)
 8000a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_I2C_MspInit+0xbc>)
 8000a86:	2180      	movs	r1, #128	; 0x80
 8000a88:	0389      	lsls	r1, r1, #14
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_I2C_MspInit+0xbc>)
 8000a90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a92:	2380      	movs	r3, #128	; 0x80
 8000a94:	039b      	lsls	r3, r3, #14
 8000a96:	4013      	ands	r3, r2
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b017      	add	sp, #92	; 0x5c
 8000aa2:	bd90      	pop	{r4, r7, pc}
 8000aa4:	40005400 	.word	0x40005400
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	50000400 	.word	0x50000400

08000ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b097      	sub	sp, #92	; 0x5c
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	2344      	movs	r3, #68	; 0x44
 8000aba:	18fb      	adds	r3, r7, r3
 8000abc:	0018      	movs	r0, r3
 8000abe:	2314      	movs	r3, #20
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	f002 fe04 	bl	80036d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac8:	2410      	movs	r4, #16
 8000aca:	193b      	adds	r3, r7, r4
 8000acc:	0018      	movs	r0, r3
 8000ace:	2334      	movs	r3, #52	; 0x34
 8000ad0:	001a      	movs	r2, r3
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	f002 fdfc 	bl	80036d0 <memset>
  if(huart->Instance==USART2)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a22      	ldr	r2, [pc, #136]	; (8000b68 <HAL_UART_MspInit+0xb8>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d13e      	bne.n	8000b60 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	0018      	movs	r0, r3
 8000af2:	f001 fd2f 	bl	8002554 <HAL_RCCEx_PeriphCLKConfig>
 8000af6:	1e03      	subs	r3, r0, #0
 8000af8:	d001      	beq.n	8000afe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000afa:	f7ff ff49 	bl	8000990 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000afe:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <HAL_UART_MspInit+0xbc>)
 8000b00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b02:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <HAL_UART_MspInit+0xbc>)
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	0289      	lsls	r1, r1, #10
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b0c:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <HAL_UART_MspInit+0xbc>)
 8000b0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	029b      	lsls	r3, r3, #10
 8000b14:	4013      	ands	r3, r2
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <HAL_UART_MspInit+0xbc>)
 8000b1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <HAL_UART_MspInit+0xbc>)
 8000b20:	2101      	movs	r1, #1
 8000b22:	430a      	orrs	r2, r1
 8000b24:	635a      	str	r2, [r3, #52]	; 0x34
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <HAL_UART_MspInit+0xbc>)
 8000b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000b32:	2144      	movs	r1, #68	; 0x44
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	220c      	movs	r2, #12
 8000b38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2201      	movs	r2, #1
 8000b44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2201      	movs	r2, #1
 8000b50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	187a      	adds	r2, r7, r1
 8000b54:	23a0      	movs	r3, #160	; 0xa0
 8000b56:	05db      	lsls	r3, r3, #23
 8000b58:	0011      	movs	r1, r2
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f000 f9c2 	bl	8000ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b017      	add	sp, #92	; 0x5c
 8000b66:	bd90      	pop	{r4, r7, pc}
 8000b68:	40004400 	.word	0x40004400
 8000b6c:	40021000 	.word	0x40021000

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b74:	e7fe      	b.n	8000b74 <NMI_Handler+0x4>

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b94:	f000 f89c 	bl	8000cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ba8:	480d      	ldr	r0, [pc, #52]	; (8000be0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000baa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bac:	f7ff fff7 	bl	8000b9e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bb2:	490d      	ldr	r1, [pc, #52]	; (8000be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	; (8000bec <LoopForever+0xe>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc8:	4c0a      	ldr	r4, [pc, #40]	; (8000bf4 <LoopForever+0x16>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bd6:	f002 fd83 	bl	80036e0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bda:	f7ff fd27 	bl	800062c <main>

08000bde <LoopForever>:

LoopForever:
  b LoopForever
 8000bde:	e7fe      	b.n	8000bde <LoopForever>
  ldr   r0, =_estack
 8000be0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bec:	080037f0 	.word	0x080037f0
  ldr r2, =_sbss
 8000bf0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bf4:	20000114 	.word	0x20000114

08000bf8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC1_COMP_IRQHandler>
	...

08000bfc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <HAL_Init+0x3c>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <HAL_Init+0x3c>)
 8000c0e:	2180      	movs	r1, #128	; 0x80
 8000c10:	0049      	lsls	r1, r1, #1
 8000c12:	430a      	orrs	r2, r1
 8000c14:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c16:	2000      	movs	r0, #0
 8000c18:	f000 f810 	bl	8000c3c <HAL_InitTick>
 8000c1c:	1e03      	subs	r3, r0, #0
 8000c1e:	d003      	beq.n	8000c28 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c20:	1dfb      	adds	r3, r7, #7
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	e001      	b.n	8000c2c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c28:	f7ff feb8 	bl	800099c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c2c:	1dfb      	adds	r3, r7, #7
 8000c2e:	781b      	ldrb	r3, [r3, #0]
}
 8000c30:	0018      	movs	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b002      	add	sp, #8
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40022000 	.word	0x40022000

08000c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c44:	230f      	movs	r3, #15
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <HAL_InitTick+0x88>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d02b      	beq.n	8000cac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c54:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <HAL_InitTick+0x8c>)
 8000c56:	681c      	ldr	r4, [r3, #0]
 8000c58:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <HAL_InitTick+0x88>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	23fa      	movs	r3, #250	; 0xfa
 8000c60:	0098      	lsls	r0, r3, #2
 8000c62:	f7ff fa57 	bl	8000114 <__udivsi3>
 8000c66:	0003      	movs	r3, r0
 8000c68:	0019      	movs	r1, r3
 8000c6a:	0020      	movs	r0, r4
 8000c6c:	f7ff fa52 	bl	8000114 <__udivsi3>
 8000c70:	0003      	movs	r3, r0
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 f929 	bl	8000eca <HAL_SYSTICK_Config>
 8000c78:	1e03      	subs	r3, r0, #0
 8000c7a:	d112      	bne.n	8000ca2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d80a      	bhi.n	8000c98 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	2301      	movs	r3, #1
 8000c86:	425b      	negs	r3, r3
 8000c88:	2200      	movs	r2, #0
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f000 f908 	bl	8000ea0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_InitTick+0x90>)
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	e00d      	b.n	8000cb4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c98:	230f      	movs	r3, #15
 8000c9a:	18fb      	adds	r3, r7, r3
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	e008      	b.n	8000cb4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ca2:	230f      	movs	r3, #15
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
 8000caa:	e003      	b.n	8000cb4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cac:	230f      	movs	r3, #15
 8000cae:	18fb      	adds	r3, r7, r3
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	781b      	ldrb	r3, [r3, #0]
}
 8000cba:	0018      	movs	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b005      	add	sp, #20
 8000cc0:	bd90      	pop	{r4, r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000004 	.word	0x20000004

08000cd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_IncTick+0x1c>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	001a      	movs	r2, r3
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_IncTick+0x20>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	18d2      	adds	r2, r2, r3
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_IncTick+0x20>)
 8000ce2:	601a      	str	r2, [r3, #0]
}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20000110 	.word	0x20000110

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b02      	ldr	r3, [pc, #8]	; (8000d04 <HAL_GetTick+0x10>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	20000110 	.word	0x20000110

08000d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d10:	f7ff fff0 	bl	8000cf4 <HAL_GetTick>
 8000d14:	0003      	movs	r3, r0
 8000d16:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	d005      	beq.n	8000d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_Delay+0x44>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	001a      	movs	r2, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	189b      	adds	r3, r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	f7ff ffe0 	bl	8000cf4 <HAL_GetTick>
 8000d34:	0002      	movs	r2, r0
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d8f7      	bhi.n	8000d30 <HAL_Delay+0x28>
  {
  }
}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b004      	add	sp, #16
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	20000008 	.word	0x20000008

08000d50 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a06      	ldr	r2, [pc, #24]	; (8000d78 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000d5e:	4013      	ands	r3, r2
 8000d60:	0019      	movs	r1, r3
 8000d62:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	430a      	orrs	r2, r1
 8000d68:	601a      	str	r2, [r3, #0]
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b002      	add	sp, #8
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	40010000 	.word	0x40010000
 8000d78:	fffff9ff 	.word	0xfffff9ff

08000d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	0002      	movs	r2, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d90:	d828      	bhi.n	8000de4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d92:	4a2f      	ldr	r2, [pc, #188]	; (8000e50 <__NVIC_SetPriority+0xd4>)
 8000d94:	1dfb      	adds	r3, r7, #7
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b25b      	sxtb	r3, r3
 8000d9a:	089b      	lsrs	r3, r3, #2
 8000d9c:	33c0      	adds	r3, #192	; 0xc0
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	589b      	ldr	r3, [r3, r2]
 8000da2:	1dfa      	adds	r2, r7, #7
 8000da4:	7812      	ldrb	r2, [r2, #0]
 8000da6:	0011      	movs	r1, r2
 8000da8:	2203      	movs	r2, #3
 8000daa:	400a      	ands	r2, r1
 8000dac:	00d2      	lsls	r2, r2, #3
 8000dae:	21ff      	movs	r1, #255	; 0xff
 8000db0:	4091      	lsls	r1, r2
 8000db2:	000a      	movs	r2, r1
 8000db4:	43d2      	mvns	r2, r2
 8000db6:	401a      	ands	r2, r3
 8000db8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	019b      	lsls	r3, r3, #6
 8000dbe:	22ff      	movs	r2, #255	; 0xff
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	2303      	movs	r3, #3
 8000dca:	4003      	ands	r3, r0
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd0:	481f      	ldr	r0, [pc, #124]	; (8000e50 <__NVIC_SetPriority+0xd4>)
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	b25b      	sxtb	r3, r3
 8000dd8:	089b      	lsrs	r3, r3, #2
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	33c0      	adds	r3, #192	; 0xc0
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000de2:	e031      	b.n	8000e48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de4:	4a1b      	ldr	r2, [pc, #108]	; (8000e54 <__NVIC_SetPriority+0xd8>)
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	0019      	movs	r1, r3
 8000dec:	230f      	movs	r3, #15
 8000dee:	400b      	ands	r3, r1
 8000df0:	3b08      	subs	r3, #8
 8000df2:	089b      	lsrs	r3, r3, #2
 8000df4:	3306      	adds	r3, #6
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	18d3      	adds	r3, r2, r3
 8000dfa:	3304      	adds	r3, #4
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	1dfa      	adds	r2, r7, #7
 8000e00:	7812      	ldrb	r2, [r2, #0]
 8000e02:	0011      	movs	r1, r2
 8000e04:	2203      	movs	r2, #3
 8000e06:	400a      	ands	r2, r1
 8000e08:	00d2      	lsls	r2, r2, #3
 8000e0a:	21ff      	movs	r1, #255	; 0xff
 8000e0c:	4091      	lsls	r1, r2
 8000e0e:	000a      	movs	r2, r1
 8000e10:	43d2      	mvns	r2, r2
 8000e12:	401a      	ands	r2, r3
 8000e14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	019b      	lsls	r3, r3, #6
 8000e1a:	22ff      	movs	r2, #255	; 0xff
 8000e1c:	401a      	ands	r2, r3
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	0018      	movs	r0, r3
 8000e24:	2303      	movs	r3, #3
 8000e26:	4003      	ands	r3, r0
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e2c:	4809      	ldr	r0, [pc, #36]	; (8000e54 <__NVIC_SetPriority+0xd8>)
 8000e2e:	1dfb      	adds	r3, r7, #7
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	001c      	movs	r4, r3
 8000e34:	230f      	movs	r3, #15
 8000e36:	4023      	ands	r3, r4
 8000e38:	3b08      	subs	r3, #8
 8000e3a:	089b      	lsrs	r3, r3, #2
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	3306      	adds	r3, #6
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	18c3      	adds	r3, r0, r3
 8000e44:	3304      	adds	r3, #4
 8000e46:	601a      	str	r2, [r3, #0]
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b003      	add	sp, #12
 8000e4e:	bd90      	pop	{r4, r7, pc}
 8000e50:	e000e100 	.word	0xe000e100
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	1e5a      	subs	r2, r3, #1
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	045b      	lsls	r3, r3, #17
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d301      	bcc.n	8000e70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e010      	b.n	8000e92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <SysTick_Config+0x44>)
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	3a01      	subs	r2, #1
 8000e76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e78:	2301      	movs	r3, #1
 8000e7a:	425b      	negs	r3, r3
 8000e7c:	2103      	movs	r1, #3
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f7ff ff7c 	bl	8000d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <SysTick_Config+0x44>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <SysTick_Config+0x44>)
 8000e8c:	2207      	movs	r2, #7
 8000e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	0018      	movs	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	b002      	add	sp, #8
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	e000e010 	.word	0xe000e010

08000ea0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	210f      	movs	r1, #15
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	1c02      	adds	r2, r0, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b25b      	sxtb	r3, r3
 8000eba:	0011      	movs	r1, r2
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f7ff ff5d 	bl	8000d7c <__NVIC_SetPriority>
}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b004      	add	sp, #16
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f7ff ffbf 	bl	8000e58 <SysTick_Config>
 8000eda:	0003      	movs	r3, r0
}
 8000edc:	0018      	movs	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b002      	add	sp, #8
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef2:	e147      	b.n	8001184 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2101      	movs	r1, #1
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	4091      	lsls	r1, r2
 8000efe:	000a      	movs	r2, r1
 8000f00:	4013      	ands	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d100      	bne.n	8000f0c <HAL_GPIO_Init+0x28>
 8000f0a:	e138      	b.n	800117e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2203      	movs	r2, #3
 8000f12:	4013      	ands	r3, r2
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d005      	beq.n	8000f24 <HAL_GPIO_Init+0x40>
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	4013      	ands	r3, r2
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d130      	bne.n	8000f86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	409a      	lsls	r2, r3
 8000f32:	0013      	movs	r3, r2
 8000f34:	43da      	mvns	r2, r3
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	409a      	lsls	r2, r3
 8000f46:	0013      	movs	r3, r2
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	0013      	movs	r3, r2
 8000f62:	43da      	mvns	r2, r3
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	091b      	lsrs	r3, r3, #4
 8000f70:	2201      	movs	r2, #1
 8000f72:	401a      	ands	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	409a      	lsls	r2, r3
 8000f78:	0013      	movs	r3, r2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d017      	beq.n	8000fc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	0013      	movs	r3, r2
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	409a      	lsls	r2, r3
 8000fb4:	0013      	movs	r3, r2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	4013      	ands	r3, r2
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d123      	bne.n	8001016 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	08da      	lsrs	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3208      	adds	r2, #8
 8000fd6:	0092      	lsls	r2, r2, #2
 8000fd8:	58d3      	ldr	r3, [r2, r3]
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	2207      	movs	r2, #7
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	0013      	movs	r3, r2
 8000fea:	43da      	mvns	r2, r3
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	691a      	ldr	r2, [r3, #16]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	2107      	movs	r1, #7
 8000ffa:	400b      	ands	r3, r1
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	409a      	lsls	r2, r3
 8001000:	0013      	movs	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	08da      	lsrs	r2, r3, #3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3208      	adds	r2, #8
 8001010:	0092      	lsls	r2, r2, #2
 8001012:	6939      	ldr	r1, [r7, #16]
 8001014:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2203      	movs	r2, #3
 8001022:	409a      	lsls	r2, r3
 8001024:	0013      	movs	r3, r2
 8001026:	43da      	mvns	r2, r3
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2203      	movs	r2, #3
 8001034:	401a      	ands	r2, r3
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	409a      	lsls	r2, r3
 800103c:	0013      	movs	r3, r2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	23c0      	movs	r3, #192	; 0xc0
 8001050:	029b      	lsls	r3, r3, #10
 8001052:	4013      	ands	r3, r2
 8001054:	d100      	bne.n	8001058 <HAL_GPIO_Init+0x174>
 8001056:	e092      	b.n	800117e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001058:	4a50      	ldr	r2, [pc, #320]	; (800119c <HAL_GPIO_Init+0x2b8>)
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	3318      	adds	r3, #24
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	589b      	ldr	r3, [r3, r2]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	2203      	movs	r2, #3
 800106a:	4013      	ands	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	220f      	movs	r2, #15
 8001070:	409a      	lsls	r2, r3
 8001072:	0013      	movs	r3, r2
 8001074:	43da      	mvns	r2, r3
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	23a0      	movs	r3, #160	; 0xa0
 8001080:	05db      	lsls	r3, r3, #23
 8001082:	429a      	cmp	r2, r3
 8001084:	d013      	beq.n	80010ae <HAL_GPIO_Init+0x1ca>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a45      	ldr	r2, [pc, #276]	; (80011a0 <HAL_GPIO_Init+0x2bc>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d00d      	beq.n	80010aa <HAL_GPIO_Init+0x1c6>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a44      	ldr	r2, [pc, #272]	; (80011a4 <HAL_GPIO_Init+0x2c0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d007      	beq.n	80010a6 <HAL_GPIO_Init+0x1c2>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a43      	ldr	r2, [pc, #268]	; (80011a8 <HAL_GPIO_Init+0x2c4>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d101      	bne.n	80010a2 <HAL_GPIO_Init+0x1be>
 800109e:	2303      	movs	r3, #3
 80010a0:	e006      	b.n	80010b0 <HAL_GPIO_Init+0x1cc>
 80010a2:	2305      	movs	r3, #5
 80010a4:	e004      	b.n	80010b0 <HAL_GPIO_Init+0x1cc>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e002      	b.n	80010b0 <HAL_GPIO_Init+0x1cc>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_GPIO_Init+0x1cc>
 80010ae:	2300      	movs	r3, #0
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	2103      	movs	r1, #3
 80010b4:	400a      	ands	r2, r1
 80010b6:	00d2      	lsls	r2, r2, #3
 80010b8:	4093      	lsls	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80010c0:	4936      	ldr	r1, [pc, #216]	; (800119c <HAL_GPIO_Init+0x2b8>)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3318      	adds	r3, #24
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ce:	4b33      	ldr	r3, [pc, #204]	; (800119c <HAL_GPIO_Init+0x2b8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	43da      	mvns	r2, r3
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	035b      	lsls	r3, r3, #13
 80010e6:	4013      	ands	r3, r2
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010f2:	4b2a      	ldr	r3, [pc, #168]	; (800119c <HAL_GPIO_Init+0x2b8>)
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80010f8:	4b28      	ldr	r3, [pc, #160]	; (800119c <HAL_GPIO_Init+0x2b8>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	43da      	mvns	r2, r3
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	039b      	lsls	r3, r3, #14
 8001110:	4013      	ands	r3, r2
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800111c:	4b1f      	ldr	r3, [pc, #124]	; (800119c <HAL_GPIO_Init+0x2b8>)
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001122:	4a1e      	ldr	r2, [pc, #120]	; (800119c <HAL_GPIO_Init+0x2b8>)
 8001124:	2384      	movs	r3, #132	; 0x84
 8001126:	58d3      	ldr	r3, [r2, r3]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	43da      	mvns	r2, r3
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	029b      	lsls	r3, r3, #10
 800113c:	4013      	ands	r3, r2
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001148:	4914      	ldr	r1, [pc, #80]	; (800119c <HAL_GPIO_Init+0x2b8>)
 800114a:	2284      	movs	r2, #132	; 0x84
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001150:	4a12      	ldr	r2, [pc, #72]	; (800119c <HAL_GPIO_Init+0x2b8>)
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	58d3      	ldr	r3, [r2, r3]
 8001156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	43da      	mvns	r2, r3
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	025b      	lsls	r3, r3, #9
 800116a:	4013      	ands	r3, r2
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001176:	4909      	ldr	r1, [pc, #36]	; (800119c <HAL_GPIO_Init+0x2b8>)
 8001178:	2280      	movs	r2, #128	; 0x80
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	3301      	adds	r3, #1
 8001182:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	40da      	lsrs	r2, r3
 800118c:	1e13      	subs	r3, r2, #0
 800118e:	d000      	beq.n	8001192 <HAL_GPIO_Init+0x2ae>
 8001190:	e6b0      	b.n	8000ef4 <HAL_GPIO_Init+0x10>
  }
}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	46c0      	nop			; (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	b006      	add	sp, #24
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40021800 	.word	0x40021800
 80011a0:	50000400 	.word	0x50000400
 80011a4:	50000800 	.word	0x50000800
 80011a8:	50000c00 	.word	0x50000c00

080011ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	0008      	movs	r0, r1
 80011b6:	0011      	movs	r1, r2
 80011b8:	1cbb      	adds	r3, r7, #2
 80011ba:	1c02      	adds	r2, r0, #0
 80011bc:	801a      	strh	r2, [r3, #0]
 80011be:	1c7b      	adds	r3, r7, #1
 80011c0:	1c0a      	adds	r2, r1, #0
 80011c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011c4:	1c7b      	adds	r3, r7, #1
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d004      	beq.n	80011d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011cc:	1cbb      	adds	r3, r7, #2
 80011ce:	881a      	ldrh	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011d4:	e003      	b.n	80011de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011d6:	1cbb      	adds	r3, r7, #2
 80011d8:	881a      	ldrh	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b002      	add	sp, #8
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e08f      	b.n	800131a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2241      	movs	r2, #65	; 0x41
 80011fe:	5c9b      	ldrb	r3, [r3, r2]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d107      	bne.n	8001216 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2240      	movs	r2, #64	; 0x40
 800120a:	2100      	movs	r1, #0
 800120c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	0018      	movs	r0, r3
 8001212:	f7ff fbeb 	bl	80009ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2241      	movs	r2, #65	; 0x41
 800121a:	2124      	movs	r1, #36	; 0x24
 800121c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2101      	movs	r1, #1
 800122a:	438a      	bics	r2, r1
 800122c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	493b      	ldr	r1, [pc, #236]	; (8001324 <HAL_I2C_Init+0x13c>)
 8001238:	400a      	ands	r2, r1
 800123a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4938      	ldr	r1, [pc, #224]	; (8001328 <HAL_I2C_Init+0x140>)
 8001248:	400a      	ands	r2, r1
 800124a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d108      	bne.n	8001266 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2180      	movs	r1, #128	; 0x80
 800125e:	0209      	lsls	r1, r1, #8
 8001260:	430a      	orrs	r2, r1
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	e007      	b.n	8001276 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2184      	movs	r1, #132	; 0x84
 8001270:	0209      	lsls	r1, r1, #8
 8001272:	430a      	orrs	r2, r1
 8001274:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d109      	bne.n	8001292 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	0109      	lsls	r1, r1, #4
 800128c:	430a      	orrs	r2, r1
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	e007      	b.n	80012a2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4923      	ldr	r1, [pc, #140]	; (800132c <HAL_I2C_Init+0x144>)
 800129e:	400a      	ands	r2, r1
 80012a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4920      	ldr	r1, [pc, #128]	; (8001330 <HAL_I2C_Init+0x148>)
 80012ae:	430a      	orrs	r2, r1
 80012b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	491a      	ldr	r1, [pc, #104]	; (8001328 <HAL_I2C_Init+0x140>)
 80012be:	400a      	ands	r2, r1
 80012c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	691a      	ldr	r2, [r3, #16]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	430a      	orrs	r2, r1
 80012da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69d9      	ldr	r1, [r3, #28]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a1a      	ldr	r2, [r3, #32]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2101      	movs	r1, #1
 80012f8:	430a      	orrs	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2241      	movs	r2, #65	; 0x41
 8001306:	2120      	movs	r1, #32
 8001308:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2242      	movs	r2, #66	; 0x42
 8001314:	2100      	movs	r1, #0
 8001316:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	0018      	movs	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	b002      	add	sp, #8
 8001320:	bd80      	pop	{r7, pc}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	f0ffffff 	.word	0xf0ffffff
 8001328:	ffff7fff 	.word	0xffff7fff
 800132c:	fffff7ff 	.word	0xfffff7ff
 8001330:	02008000 	.word	0x02008000

08001334 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	b089      	sub	sp, #36	; 0x24
 8001338:	af02      	add	r7, sp, #8
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	0008      	movs	r0, r1
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	0019      	movs	r1, r3
 8001342:	230a      	movs	r3, #10
 8001344:	18fb      	adds	r3, r7, r3
 8001346:	1c02      	adds	r2, r0, #0
 8001348:	801a      	strh	r2, [r3, #0]
 800134a:	2308      	movs	r3, #8
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	1c0a      	adds	r2, r1, #0
 8001350:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2241      	movs	r2, #65	; 0x41
 8001356:	5c9b      	ldrb	r3, [r3, r2]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b20      	cmp	r3, #32
 800135c:	d000      	beq.n	8001360 <HAL_I2C_Master_Transmit+0x2c>
 800135e:	e10a      	b.n	8001576 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2240      	movs	r2, #64	; 0x40
 8001364:	5c9b      	ldrb	r3, [r3, r2]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d101      	bne.n	800136e <HAL_I2C_Master_Transmit+0x3a>
 800136a:	2302      	movs	r3, #2
 800136c:	e104      	b.n	8001578 <HAL_I2C_Master_Transmit+0x244>
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2240      	movs	r2, #64	; 0x40
 8001372:	2101      	movs	r1, #1
 8001374:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001376:	f7ff fcbd 	bl	8000cf4 <HAL_GetTick>
 800137a:	0003      	movs	r3, r0
 800137c:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	0219      	lsls	r1, r3, #8
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	2319      	movs	r3, #25
 800138a:	2201      	movs	r2, #1
 800138c:	f000 f91e 	bl	80015cc <I2C_WaitOnFlagUntilTimeout>
 8001390:	1e03      	subs	r3, r0, #0
 8001392:	d001      	beq.n	8001398 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e0ef      	b.n	8001578 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2241      	movs	r2, #65	; 0x41
 800139c:	2121      	movs	r1, #33	; 0x21
 800139e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2242      	movs	r2, #66	; 0x42
 80013a4:	2110      	movs	r1, #16
 80013a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2200      	movs	r2, #0
 80013ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2208      	movs	r2, #8
 80013b8:	18ba      	adds	r2, r7, r2
 80013ba:	8812      	ldrh	r2, [r2, #0]
 80013bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2200      	movs	r2, #0
 80013c2:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	2bff      	cmp	r3, #255	; 0xff
 80013cc:	d906      	bls.n	80013dc <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	22ff      	movs	r2, #255	; 0xff
 80013d2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	045b      	lsls	r3, r3, #17
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	e007      	b.n	80013ec <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80013e6:	2380      	movs	r3, #128	; 0x80
 80013e8:	049b      	lsls	r3, r3, #18
 80013ea:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d027      	beq.n	8001444 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	781a      	ldrb	r2, [r3, #0]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001404:	1c5a      	adds	r2, r3, #1
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800140e:	b29b      	uxth	r3, r3
 8001410:	3b01      	subs	r3, #1
 8001412:	b29a      	uxth	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800141c:	3b01      	subs	r3, #1
 800141e:	b29a      	uxth	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001428:	b2db      	uxtb	r3, r3
 800142a:	3301      	adds	r3, #1
 800142c:	b2da      	uxtb	r2, r3
 800142e:	697c      	ldr	r4, [r7, #20]
 8001430:	230a      	movs	r3, #10
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	8819      	ldrh	r1, [r3, #0]
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	4b51      	ldr	r3, [pc, #324]	; (8001580 <HAL_I2C_Master_Transmit+0x24c>)
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	0023      	movs	r3, r4
 800143e:	f000 faa7 	bl	8001990 <I2C_TransferConfig>
 8001442:	e06f      	b.n	8001524 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001448:	b2da      	uxtb	r2, r3
 800144a:	697c      	ldr	r4, [r7, #20]
 800144c:	230a      	movs	r3, #10
 800144e:	18fb      	adds	r3, r7, r3
 8001450:	8819      	ldrh	r1, [r3, #0]
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	4b4a      	ldr	r3, [pc, #296]	; (8001580 <HAL_I2C_Master_Transmit+0x24c>)
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	0023      	movs	r3, r4
 800145a:	f000 fa99 	bl	8001990 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800145e:	e061      	b.n	8001524 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	0018      	movs	r0, r3
 8001468:	f000 f908 	bl	800167c <I2C_WaitOnTXISFlagUntilTimeout>
 800146c:	1e03      	subs	r3, r0, #0
 800146e:	d001      	beq.n	8001474 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e081      	b.n	8001578 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001478:	781a      	ldrb	r2, [r3, #0]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	1c5a      	adds	r2, r3, #1
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800148e:	b29b      	uxth	r3, r3
 8001490:	3b01      	subs	r3, #1
 8001492:	b29a      	uxth	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800149c:	3b01      	subs	r3, #1
 800149e:	b29a      	uxth	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d03a      	beq.n	8001524 <HAL_I2C_Master_Transmit+0x1f0>
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d136      	bne.n	8001524 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	0013      	movs	r3, r2
 80014c0:	2200      	movs	r2, #0
 80014c2:	2180      	movs	r1, #128	; 0x80
 80014c4:	f000 f882 	bl	80015cc <I2C_WaitOnFlagUntilTimeout>
 80014c8:	1e03      	subs	r3, r0, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e053      	b.n	8001578 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	2bff      	cmp	r3, #255	; 0xff
 80014d8:	d911      	bls.n	80014fe <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	22ff      	movs	r2, #255	; 0xff
 80014de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	045c      	lsls	r4, r3, #17
 80014ea:	230a      	movs	r3, #10
 80014ec:	18fb      	adds	r3, r7, r3
 80014ee:	8819      	ldrh	r1, [r3, #0]
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	2300      	movs	r3, #0
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	0023      	movs	r3, r4
 80014f8:	f000 fa4a 	bl	8001990 <I2C_TransferConfig>
 80014fc:	e012      	b.n	8001524 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001502:	b29a      	uxth	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800150c:	b2da      	uxtb	r2, r3
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	049c      	lsls	r4, r3, #18
 8001512:	230a      	movs	r3, #10
 8001514:	18fb      	adds	r3, r7, r3
 8001516:	8819      	ldrh	r1, [r3, #0]
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	2300      	movs	r3, #0
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	0023      	movs	r3, r4
 8001520:	f000 fa36 	bl	8001990 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001528:	b29b      	uxth	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d198      	bne.n	8001460 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	0018      	movs	r0, r3
 8001536:	f000 f8e7 	bl	8001708 <I2C_WaitOnSTOPFlagUntilTimeout>
 800153a:	1e03      	subs	r3, r0, #0
 800153c:	d001      	beq.n	8001542 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e01a      	b.n	8001578 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2220      	movs	r2, #32
 8001548:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	490b      	ldr	r1, [pc, #44]	; (8001584 <HAL_I2C_Master_Transmit+0x250>)
 8001556:	400a      	ands	r2, r1
 8001558:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2241      	movs	r2, #65	; 0x41
 800155e:	2120      	movs	r1, #32
 8001560:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2242      	movs	r2, #66	; 0x42
 8001566:	2100      	movs	r1, #0
 8001568:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2240      	movs	r2, #64	; 0x40
 800156e:	2100      	movs	r1, #0
 8001570:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	e000      	b.n	8001578 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8001576:	2302      	movs	r3, #2
  }
}
 8001578:	0018      	movs	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	b007      	add	sp, #28
 800157e:	bd90      	pop	{r4, r7, pc}
 8001580:	80002000 	.word	0x80002000
 8001584:	fe00e800 	.word	0xfe00e800

08001588 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	2202      	movs	r2, #2
 8001598:	4013      	ands	r3, r2
 800159a:	2b02      	cmp	r3, #2
 800159c:	d103      	bne.n	80015a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2200      	movs	r2, #0
 80015a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	2201      	movs	r2, #1
 80015ae:	4013      	ands	r3, r2
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d007      	beq.n	80015c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	699a      	ldr	r2, [r3, #24]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2101      	movs	r1, #1
 80015c0:	430a      	orrs	r2, r1
 80015c2:	619a      	str	r2, [r3, #24]
  }
}
 80015c4:	46c0      	nop			; (mov r8, r8)
 80015c6:	46bd      	mov	sp, r7
 80015c8:	b002      	add	sp, #8
 80015ca:	bd80      	pop	{r7, pc}

080015cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	1dfb      	adds	r3, r7, #7
 80015da:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015dc:	e03a      	b.n	8001654 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	6839      	ldr	r1, [r7, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	0018      	movs	r0, r3
 80015e6:	f000 f8d3 	bl	8001790 <I2C_IsErrorOccurred>
 80015ea:	1e03      	subs	r3, r0, #0
 80015ec:	d001      	beq.n	80015f2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e040      	b.n	8001674 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	3301      	adds	r3, #1
 80015f6:	d02d      	beq.n	8001654 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015f8:	f7ff fb7c 	bl	8000cf4 <HAL_GetTick>
 80015fc:	0002      	movs	r2, r0
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	429a      	cmp	r2, r3
 8001606:	d302      	bcc.n	800160e <I2C_WaitOnFlagUntilTimeout+0x42>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d122      	bne.n	8001654 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	4013      	ands	r3, r2
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	425a      	negs	r2, r3
 800161e:	4153      	adcs	r3, r2
 8001620:	b2db      	uxtb	r3, r3
 8001622:	001a      	movs	r2, r3
 8001624:	1dfb      	adds	r3, r7, #7
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d113      	bne.n	8001654 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001630:	2220      	movs	r2, #32
 8001632:	431a      	orrs	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2241      	movs	r2, #65	; 0x41
 800163c:	2120      	movs	r1, #32
 800163e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2242      	movs	r2, #66	; 0x42
 8001644:	2100      	movs	r1, #0
 8001646:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2240      	movs	r2, #64	; 0x40
 800164c:	2100      	movs	r1, #0
 800164e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e00f      	b.n	8001674 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	4013      	ands	r3, r2
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	425a      	negs	r2, r3
 8001664:	4153      	adcs	r3, r2
 8001666:	b2db      	uxtb	r3, r3
 8001668:	001a      	movs	r2, r3
 800166a:	1dfb      	adds	r3, r7, #7
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d0b5      	beq.n	80015de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	0018      	movs	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	b004      	add	sp, #16
 800167a:	bd80      	pop	{r7, pc}

0800167c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001688:	e032      	b.n	80016f0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	0018      	movs	r0, r3
 8001692:	f000 f87d 	bl	8001790 <I2C_IsErrorOccurred>
 8001696:	1e03      	subs	r3, r0, #0
 8001698:	d001      	beq.n	800169e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e030      	b.n	8001700 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	3301      	adds	r3, #1
 80016a2:	d025      	beq.n	80016f0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016a4:	f7ff fb26 	bl	8000cf4 <HAL_GetTick>
 80016a8:	0002      	movs	r2, r0
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d302      	bcc.n	80016ba <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d11a      	bne.n	80016f0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	2202      	movs	r2, #2
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d013      	beq.n	80016f0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016cc:	2220      	movs	r2, #32
 80016ce:	431a      	orrs	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2241      	movs	r2, #65	; 0x41
 80016d8:	2120      	movs	r1, #32
 80016da:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2242      	movs	r2, #66	; 0x42
 80016e0:	2100      	movs	r1, #0
 80016e2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2240      	movs	r2, #64	; 0x40
 80016e8:	2100      	movs	r1, #0
 80016ea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e007      	b.n	8001700 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	2202      	movs	r2, #2
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d1c5      	bne.n	800168a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	0018      	movs	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	b004      	add	sp, #16
 8001706:	bd80      	pop	{r7, pc}

08001708 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001714:	e02f      	b.n	8001776 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	0018      	movs	r0, r3
 800171e:	f000 f837 	bl	8001790 <I2C_IsErrorOccurred>
 8001722:	1e03      	subs	r3, r0, #0
 8001724:	d001      	beq.n	800172a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e02d      	b.n	8001786 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800172a:	f7ff fae3 	bl	8000cf4 <HAL_GetTick>
 800172e:	0002      	movs	r2, r0
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	429a      	cmp	r2, r3
 8001738:	d302      	bcc.n	8001740 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d11a      	bne.n	8001776 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	2220      	movs	r2, #32
 8001748:	4013      	ands	r3, r2
 800174a:	2b20      	cmp	r3, #32
 800174c:	d013      	beq.n	8001776 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	2220      	movs	r2, #32
 8001754:	431a      	orrs	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2241      	movs	r2, #65	; 0x41
 800175e:	2120      	movs	r1, #32
 8001760:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2242      	movs	r2, #66	; 0x42
 8001766:	2100      	movs	r1, #0
 8001768:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2240      	movs	r2, #64	; 0x40
 800176e:	2100      	movs	r1, #0
 8001770:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e007      	b.n	8001786 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	2220      	movs	r2, #32
 800177e:	4013      	ands	r3, r2
 8001780:	2b20      	cmp	r3, #32
 8001782:	d1c8      	bne.n	8001716 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	0018      	movs	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	b004      	add	sp, #16
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001790:	b590      	push	{r4, r7, lr}
 8001792:	b08b      	sub	sp, #44	; 0x2c
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800179c:	2327      	movs	r3, #39	; 0x27
 800179e:	18fb      	adds	r3, r7, r3
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2210      	movs	r2, #16
 80017b8:	4013      	ands	r3, r2
 80017ba:	d100      	bne.n	80017be <I2C_IsErrorOccurred+0x2e>
 80017bc:	e082      	b.n	80018c4 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2210      	movs	r2, #16
 80017c4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80017c6:	e060      	b.n	800188a <I2C_IsErrorOccurred+0xfa>
 80017c8:	2427      	movs	r4, #39	; 0x27
 80017ca:	193b      	adds	r3, r7, r4
 80017cc:	193a      	adds	r2, r7, r4
 80017ce:	7812      	ldrb	r2, [r2, #0]
 80017d0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	3301      	adds	r3, #1
 80017d6:	d058      	beq.n	800188a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017d8:	f7ff fa8c 	bl	8000cf4 <HAL_GetTick>
 80017dc:	0002      	movs	r2, r0
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d306      	bcc.n	80017f6 <I2C_IsErrorOccurred+0x66>
 80017e8:	193b      	adds	r3, r7, r4
 80017ea:	193a      	adds	r2, r7, r4
 80017ec:	7812      	ldrb	r2, [r2, #0]
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d149      	bne.n	800188a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	01db      	lsls	r3, r3, #7
 8001800:	4013      	ands	r3, r2
 8001802:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001804:	2013      	movs	r0, #19
 8001806:	183b      	adds	r3, r7, r0
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	2142      	movs	r1, #66	; 0x42
 800180c:	5c52      	ldrb	r2, [r2, r1]
 800180e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	699a      	ldr	r2, [r3, #24]
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	021b      	lsls	r3, r3, #8
 800181a:	401a      	ands	r2, r3
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	429a      	cmp	r2, r3
 8001822:	d126      	bne.n	8001872 <I2C_IsErrorOccurred+0xe2>
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	01db      	lsls	r3, r3, #7
 800182a:	429a      	cmp	r2, r3
 800182c:	d021      	beq.n	8001872 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800182e:	183b      	adds	r3, r7, r0
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b20      	cmp	r3, #32
 8001834:	d01d      	beq.n	8001872 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2180      	movs	r1, #128	; 0x80
 8001842:	01c9      	lsls	r1, r1, #7
 8001844:	430a      	orrs	r2, r1
 8001846:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001848:	f7ff fa54 	bl	8000cf4 <HAL_GetTick>
 800184c:	0003      	movs	r3, r0
 800184e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001850:	e00f      	b.n	8001872 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001852:	f7ff fa4f 	bl	8000cf4 <HAL_GetTick>
 8001856:	0002      	movs	r2, r0
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b19      	cmp	r3, #25
 800185e:	d908      	bls.n	8001872 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	2220      	movs	r2, #32
 8001864:	4313      	orrs	r3, r2
 8001866:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001868:	2327      	movs	r3, #39	; 0x27
 800186a:	18fb      	adds	r3, r7, r3
 800186c:	2201      	movs	r2, #1
 800186e:	701a      	strb	r2, [r3, #0]

              break;
 8001870:	e00b      	b.n	800188a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	2220      	movs	r2, #32
 800187a:	4013      	ands	r3, r2
 800187c:	2127      	movs	r1, #39	; 0x27
 800187e:	187a      	adds	r2, r7, r1
 8001880:	1879      	adds	r1, r7, r1
 8001882:	7809      	ldrb	r1, [r1, #0]
 8001884:	7011      	strb	r1, [r2, #0]
 8001886:	2b20      	cmp	r3, #32
 8001888:	d1e3      	bne.n	8001852 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	2220      	movs	r2, #32
 8001892:	4013      	ands	r3, r2
 8001894:	2b20      	cmp	r3, #32
 8001896:	d004      	beq.n	80018a2 <I2C_IsErrorOccurred+0x112>
 8001898:	2327      	movs	r3, #39	; 0x27
 800189a:	18fb      	adds	r3, r7, r3
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d092      	beq.n	80017c8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80018a2:	2327      	movs	r3, #39	; 0x27
 80018a4:	18fb      	adds	r3, r7, r3
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d103      	bne.n	80018b4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2220      	movs	r2, #32
 80018b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	2204      	movs	r2, #4
 80018b8:	4313      	orrs	r3, r2
 80018ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80018bc:	2327      	movs	r3, #39	; 0x27
 80018be:	18fb      	adds	r3, r7, r3
 80018c0:	2201      	movs	r2, #1
 80018c2:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4013      	ands	r3, r2
 80018d4:	d00c      	beq.n	80018f0 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80018d6:	6a3b      	ldr	r3, [r7, #32]
 80018d8:	2201      	movs	r2, #1
 80018da:	4313      	orrs	r3, r2
 80018dc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2280      	movs	r2, #128	; 0x80
 80018e4:	0052      	lsls	r2, r2, #1
 80018e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018e8:	2327      	movs	r3, #39	; 0x27
 80018ea:	18fb      	adds	r3, r7, r3
 80018ec:	2201      	movs	r2, #1
 80018ee:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4013      	ands	r3, r2
 80018f8:	d00c      	beq.n	8001914 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80018fa:	6a3b      	ldr	r3, [r7, #32]
 80018fc:	2208      	movs	r2, #8
 80018fe:	4313      	orrs	r3, r2
 8001900:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2280      	movs	r2, #128	; 0x80
 8001908:	00d2      	lsls	r2, r2, #3
 800190a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800190c:	2327      	movs	r3, #39	; 0x27
 800190e:	18fb      	adds	r3, r7, r3
 8001910:	2201      	movs	r2, #1
 8001912:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4013      	ands	r3, r2
 800191c:	d00c      	beq.n	8001938 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	2202      	movs	r2, #2
 8001922:	4313      	orrs	r3, r2
 8001924:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2280      	movs	r2, #128	; 0x80
 800192c:	0092      	lsls	r2, r2, #2
 800192e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001930:	2327      	movs	r3, #39	; 0x27
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	2201      	movs	r2, #1
 8001936:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001938:	2327      	movs	r3, #39	; 0x27
 800193a:	18fb      	adds	r3, r7, r3
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d01d      	beq.n	800197e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	0018      	movs	r0, r3
 8001946:	f7ff fe1f 	bl	8001588 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	490d      	ldr	r1, [pc, #52]	; (800198c <I2C_IsErrorOccurred+0x1fc>)
 8001956:	400a      	ands	r2, r1
 8001958:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	431a      	orrs	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2241      	movs	r2, #65	; 0x41
 800196a:	2120      	movs	r1, #32
 800196c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2242      	movs	r2, #66	; 0x42
 8001972:	2100      	movs	r1, #0
 8001974:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2240      	movs	r2, #64	; 0x40
 800197a:	2100      	movs	r1, #0
 800197c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800197e:	2327      	movs	r3, #39	; 0x27
 8001980:	18fb      	adds	r3, r7, r3
 8001982:	781b      	ldrb	r3, [r3, #0]
}
 8001984:	0018      	movs	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	b00b      	add	sp, #44	; 0x2c
 800198a:	bd90      	pop	{r4, r7, pc}
 800198c:	fe00e800 	.word	0xfe00e800

08001990 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b087      	sub	sp, #28
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	0008      	movs	r0, r1
 800199a:	0011      	movs	r1, r2
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	240a      	movs	r4, #10
 80019a0:	193b      	adds	r3, r7, r4
 80019a2:	1c02      	adds	r2, r0, #0
 80019a4:	801a      	strh	r2, [r3, #0]
 80019a6:	2009      	movs	r0, #9
 80019a8:	183b      	adds	r3, r7, r0
 80019aa:	1c0a      	adds	r2, r1, #0
 80019ac:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019ae:	193b      	adds	r3, r7, r4
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	059b      	lsls	r3, r3, #22
 80019b4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80019b6:	183b      	adds	r3, r7, r0
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	0419      	lsls	r1, r3, #16
 80019bc:	23ff      	movs	r3, #255	; 0xff
 80019be:	041b      	lsls	r3, r3, #16
 80019c0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019c2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ca:	4313      	orrs	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	085b      	lsrs	r3, r3, #1
 80019d0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019da:	0d51      	lsrs	r1, r2, #21
 80019dc:	2280      	movs	r2, #128	; 0x80
 80019de:	00d2      	lsls	r2, r2, #3
 80019e0:	400a      	ands	r2, r1
 80019e2:	4907      	ldr	r1, [pc, #28]	; (8001a00 <I2C_TransferConfig+0x70>)
 80019e4:	430a      	orrs	r2, r1
 80019e6:	43d2      	mvns	r2, r2
 80019e8:	401a      	ands	r2, r3
 80019ea:	0011      	movs	r1, r2
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b007      	add	sp, #28
 80019fc:	bd90      	pop	{r4, r7, pc}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	03ff63ff 	.word	0x03ff63ff

08001a04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2241      	movs	r2, #65	; 0x41
 8001a12:	5c9b      	ldrb	r3, [r3, r2]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	d138      	bne.n	8001a8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2240      	movs	r2, #64	; 0x40
 8001a1e:	5c9b      	ldrb	r3, [r3, r2]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e032      	b.n	8001a8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2240      	movs	r2, #64	; 0x40
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2241      	movs	r2, #65	; 0x41
 8001a34:	2124      	movs	r1, #36	; 0x24
 8001a36:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2101      	movs	r1, #1
 8001a44:	438a      	bics	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4911      	ldr	r1, [pc, #68]	; (8001a98 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001a54:	400a      	ands	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6819      	ldr	r1, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2101      	movs	r1, #1
 8001a74:	430a      	orrs	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2241      	movs	r2, #65	; 0x41
 8001a7c:	2120      	movs	r1, #32
 8001a7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2240      	movs	r2, #64	; 0x40
 8001a84:	2100      	movs	r1, #0
 8001a86:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	e000      	b.n	8001a8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a8c:	2302      	movs	r3, #2
  }
}
 8001a8e:	0018      	movs	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b002      	add	sp, #8
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	ffffefff 	.word	0xffffefff

08001a9c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2241      	movs	r2, #65	; 0x41
 8001aaa:	5c9b      	ldrb	r3, [r3, r2]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b20      	cmp	r3, #32
 8001ab0:	d139      	bne.n	8001b26 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2240      	movs	r2, #64	; 0x40
 8001ab6:	5c9b      	ldrb	r3, [r3, r2]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e033      	b.n	8001b28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2240      	movs	r2, #64	; 0x40
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2241      	movs	r2, #65	; 0x41
 8001acc:	2124      	movs	r1, #36	; 0x24
 8001ace:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2101      	movs	r1, #1
 8001adc:	438a      	bics	r2, r1
 8001ade:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4a11      	ldr	r2, [pc, #68]	; (8001b30 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	021b      	lsls	r3, r3, #8
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2241      	movs	r2, #65	; 0x41
 8001b16:	2120      	movs	r1, #32
 8001b18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2240      	movs	r2, #64	; 0x40
 8001b1e:	2100      	movs	r1, #0
 8001b20:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	e000      	b.n	8001b28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b26:	2302      	movs	r3, #2
  }
}
 8001b28:	0018      	movs	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b004      	add	sp, #16
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	fffff0ff 	.word	0xfffff0ff

08001b34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001b3c:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a19      	ldr	r2, [pc, #100]	; (8001ba8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	0019      	movs	r1, r3
 8001b46:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d11f      	bne.n	8001b98 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	0013      	movs	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	189b      	adds	r3, r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4912      	ldr	r1, [pc, #72]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001b66:	0018      	movs	r0, r3
 8001b68:	f7fe fad4 	bl	8000114 <__udivsi3>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	3301      	adds	r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b72:	e008      	b.n	8001b86 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	e001      	b.n	8001b86 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e009      	b.n	8001b9a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b86:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	401a      	ands	r2, r3
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d0ed      	beq.n	8001b74 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	b004      	add	sp, #16
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	40007000 	.word	0x40007000
 8001ba8:	fffff9ff 	.word	0xfffff9ff
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	000f4240 	.word	0x000f4240

08001bb4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	23e0      	movs	r3, #224	; 0xe0
 8001bbe:	01db      	lsls	r3, r3, #7
 8001bc0:	4013      	ands	r3, r2
}
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40021000 	.word	0x40021000

08001bcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e2fe      	b.n	80021dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2201      	movs	r2, #1
 8001be4:	4013      	ands	r3, r2
 8001be6:	d100      	bne.n	8001bea <HAL_RCC_OscConfig+0x1e>
 8001be8:	e07c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bea:	4bc3      	ldr	r3, [pc, #780]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2238      	movs	r2, #56	; 0x38
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bf4:	4bc0      	ldr	r3, [pc, #768]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	2b10      	cmp	r3, #16
 8001c02:	d102      	bne.n	8001c0a <HAL_RCC_OscConfig+0x3e>
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	2b03      	cmp	r3, #3
 8001c08:	d002      	beq.n	8001c10 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d10b      	bne.n	8001c28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c10:	4bb9      	ldr	r3, [pc, #740]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	029b      	lsls	r3, r3, #10
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d062      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x116>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d15e      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e2d9      	b.n	80021dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	025b      	lsls	r3, r3, #9
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d107      	bne.n	8001c44 <HAL_RCC_OscConfig+0x78>
 8001c34:	4bb0      	ldr	r3, [pc, #704]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4baf      	ldr	r3, [pc, #700]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c3a:	2180      	movs	r1, #128	; 0x80
 8001c3c:	0249      	lsls	r1, r1, #9
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	e020      	b.n	8001c86 <HAL_RCC_OscConfig+0xba>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	23a0      	movs	r3, #160	; 0xa0
 8001c4a:	02db      	lsls	r3, r3, #11
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d10e      	bne.n	8001c6e <HAL_RCC_OscConfig+0xa2>
 8001c50:	4ba9      	ldr	r3, [pc, #676]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4ba8      	ldr	r3, [pc, #672]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c56:	2180      	movs	r1, #128	; 0x80
 8001c58:	02c9      	lsls	r1, r1, #11
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	4ba6      	ldr	r3, [pc, #664]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	4ba5      	ldr	r3, [pc, #660]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c64:	2180      	movs	r1, #128	; 0x80
 8001c66:	0249      	lsls	r1, r1, #9
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	e00b      	b.n	8001c86 <HAL_RCC_OscConfig+0xba>
 8001c6e:	4ba2      	ldr	r3, [pc, #648]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4ba1      	ldr	r3, [pc, #644]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c74:	49a1      	ldr	r1, [pc, #644]	; (8001efc <HAL_RCC_OscConfig+0x330>)
 8001c76:	400a      	ands	r2, r1
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	4b9f      	ldr	r3, [pc, #636]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4b9e      	ldr	r3, [pc, #632]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c80:	499f      	ldr	r1, [pc, #636]	; (8001f00 <HAL_RCC_OscConfig+0x334>)
 8001c82:	400a      	ands	r2, r1
 8001c84:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d014      	beq.n	8001cb8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8e:	f7ff f831 	bl	8000cf4 <HAL_GetTick>
 8001c92:	0003      	movs	r3, r0
 8001c94:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c98:	f7ff f82c 	bl	8000cf4 <HAL_GetTick>
 8001c9c:	0002      	movs	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	; 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e298      	b.n	80021dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001caa:	4b93      	ldr	r3, [pc, #588]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	029b      	lsls	r3, r3, #10
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0xcc>
 8001cb6:	e015      	b.n	8001ce4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff f81c 	bl	8000cf4 <HAL_GetTick>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc2:	f7ff f817 	bl	8000cf4 <HAL_GetTick>
 8001cc6:	0002      	movs	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b64      	cmp	r3, #100	; 0x64
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e283      	b.n	80021dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cd4:	4b88      	ldr	r3, [pc, #544]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	029b      	lsls	r3, r3, #10
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d1f0      	bne.n	8001cc2 <HAL_RCC_OscConfig+0xf6>
 8001ce0:	e000      	b.n	8001ce4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	4013      	ands	r3, r2
 8001cec:	d100      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x124>
 8001cee:	e099      	b.n	8001e24 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cf0:	4b81      	ldr	r3, [pc, #516]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2238      	movs	r2, #56	; 0x38
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cfa:	4b7f      	ldr	r3, [pc, #508]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	2203      	movs	r2, #3
 8001d00:	4013      	ands	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	2b10      	cmp	r3, #16
 8001d08:	d102      	bne.n	8001d10 <HAL_RCC_OscConfig+0x144>
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d002      	beq.n	8001d16 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d135      	bne.n	8001d82 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d16:	4b78      	ldr	r3, [pc, #480]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d005      	beq.n	8001d2e <HAL_RCC_OscConfig+0x162>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e256      	b.n	80021dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2e:	4b72      	ldr	r3, [pc, #456]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4a74      	ldr	r2, [pc, #464]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	0019      	movs	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	021a      	lsls	r2, r3, #8
 8001d3e:	4b6e      	ldr	r3, [pc, #440]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001d40:	430a      	orrs	r2, r1
 8001d42:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d112      	bne.n	8001d70 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d4a:	4b6b      	ldr	r3, [pc, #428]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a6e      	ldr	r2, [pc, #440]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	0019      	movs	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	4b67      	ldr	r3, [pc, #412]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001d5e:	4b66      	ldr	r3, [pc, #408]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	0adb      	lsrs	r3, r3, #11
 8001d64:	2207      	movs	r2, #7
 8001d66:	4013      	ands	r3, r2
 8001d68:	4a68      	ldr	r2, [pc, #416]	; (8001f0c <HAL_RCC_OscConfig+0x340>)
 8001d6a:	40da      	lsrs	r2, r3
 8001d6c:	4b68      	ldr	r3, [pc, #416]	; (8001f10 <HAL_RCC_OscConfig+0x344>)
 8001d6e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d70:	4b68      	ldr	r3, [pc, #416]	; (8001f14 <HAL_RCC_OscConfig+0x348>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	0018      	movs	r0, r3
 8001d76:	f7fe ff61 	bl	8000c3c <HAL_InitTick>
 8001d7a:	1e03      	subs	r3, r0, #0
 8001d7c:	d051      	beq.n	8001e22 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e22c      	b.n	80021dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d030      	beq.n	8001dec <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d8a:	4b5b      	ldr	r3, [pc, #364]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a5e      	ldr	r2, [pc, #376]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	0019      	movs	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	4b57      	ldr	r3, [pc, #348]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001d9e:	4b56      	ldr	r3, [pc, #344]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	4b55      	ldr	r3, [pc, #340]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001da4:	2180      	movs	r1, #128	; 0x80
 8001da6:	0049      	lsls	r1, r1, #1
 8001da8:	430a      	orrs	r2, r1
 8001daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7fe ffa2 	bl	8000cf4 <HAL_GetTick>
 8001db0:	0003      	movs	r3, r0
 8001db2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db6:	f7fe ff9d 	bl	8000cf4 <HAL_GetTick>
 8001dba:	0002      	movs	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e209      	b.n	80021dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc8:	4b4b      	ldr	r3, [pc, #300]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd4:	4b48      	ldr	r3, [pc, #288]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	4a4a      	ldr	r2, [pc, #296]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	0019      	movs	r1, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	021a      	lsls	r2, r3, #8
 8001de4:	4b44      	ldr	r3, [pc, #272]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001de6:	430a      	orrs	r2, r1
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	e01b      	b.n	8001e24 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001dec:	4b42      	ldr	r3, [pc, #264]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b41      	ldr	r3, [pc, #260]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001df2:	4949      	ldr	r1, [pc, #292]	; (8001f18 <HAL_RCC_OscConfig+0x34c>)
 8001df4:	400a      	ands	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7fe ff7c 	bl	8000cf4 <HAL_GetTick>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e02:	f7fe ff77 	bl	8000cf4 <HAL_GetTick>
 8001e06:	0002      	movs	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e1e3      	b.n	80021dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e14:	4b38      	ldr	r3, [pc, #224]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d1f0      	bne.n	8001e02 <HAL_RCC_OscConfig+0x236>
 8001e20:	e000      	b.n	8001e24 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e22:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2208      	movs	r2, #8
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d047      	beq.n	8001ebe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e2e:	4b32      	ldr	r3, [pc, #200]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2238      	movs	r2, #56	; 0x38
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b18      	cmp	r3, #24
 8001e38:	d10a      	bne.n	8001e50 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001e3a:	4b2f      	ldr	r3, [pc, #188]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3e:	2202      	movs	r2, #2
 8001e40:	4013      	ands	r3, r2
 8001e42:	d03c      	beq.n	8001ebe <HAL_RCC_OscConfig+0x2f2>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d138      	bne.n	8001ebe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e1c5      	b.n	80021dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d019      	beq.n	8001e8c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001e58:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001e5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e5c:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001e5e:	2101      	movs	r1, #1
 8001e60:	430a      	orrs	r2, r1
 8001e62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7fe ff46 	bl	8000cf4 <HAL_GetTick>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e6e:	f7fe ff41 	bl	8000cf4 <HAL_GetTick>
 8001e72:	0002      	movs	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e1ad      	b.n	80021dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e80:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e84:	2202      	movs	r2, #2
 8001e86:	4013      	ands	r3, r2
 8001e88:	d0f1      	beq.n	8001e6e <HAL_RCC_OscConfig+0x2a2>
 8001e8a:	e018      	b.n	8001ebe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001e8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e90:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001e92:	2101      	movs	r1, #1
 8001e94:	438a      	bics	r2, r1
 8001e96:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7fe ff2c 	bl	8000cf4 <HAL_GetTick>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea2:	f7fe ff27 	bl	8000cf4 <HAL_GetTick>
 8001ea6:	0002      	movs	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e193      	b.n	80021dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eb4:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb8:	2202      	movs	r2, #2
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d1f1      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d100      	bne.n	8001eca <HAL_RCC_OscConfig+0x2fe>
 8001ec8:	e0c6      	b.n	8002058 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eca:	231f      	movs	r3, #31
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2238      	movs	r2, #56	; 0x38
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b20      	cmp	r3, #32
 8001edc:	d11e      	bne.n	8001f1c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d100      	bne.n	8001eea <HAL_RCC_OscConfig+0x31e>
 8001ee8:	e0b6      	b.n	8002058 <HAL_RCC_OscConfig+0x48c>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d000      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x328>
 8001ef2:	e0b1      	b.n	8002058 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e171      	b.n	80021dc <HAL_RCC_OscConfig+0x610>
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	fffeffff 	.word	0xfffeffff
 8001f00:	fffbffff 	.word	0xfffbffff
 8001f04:	ffff80ff 	.word	0xffff80ff
 8001f08:	ffffc7ff 	.word	0xffffc7ff
 8001f0c:	00f42400 	.word	0x00f42400
 8001f10:	20000000 	.word	0x20000000
 8001f14:	20000004 	.word	0x20000004
 8001f18:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f1c:	4bb1      	ldr	r3, [pc, #708]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 8001f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	055b      	lsls	r3, r3, #21
 8001f24:	4013      	ands	r3, r2
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_OscConfig+0x360>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <HAL_RCC_OscConfig+0x362>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d011      	beq.n	8001f56 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	4bac      	ldr	r3, [pc, #688]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 8001f34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f36:	4bab      	ldr	r3, [pc, #684]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 8001f38:	2180      	movs	r1, #128	; 0x80
 8001f3a:	0549      	lsls	r1, r1, #21
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f40:	4ba8      	ldr	r3, [pc, #672]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 8001f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	055b      	lsls	r3, r3, #21
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001f4e:	231f      	movs	r3, #31
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f56:	4ba4      	ldr	r3, [pc, #656]	; (80021e8 <HAL_RCC_OscConfig+0x61c>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d11a      	bne.n	8001f98 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f62:	4ba1      	ldr	r3, [pc, #644]	; (80021e8 <HAL_RCC_OscConfig+0x61c>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	4ba0      	ldr	r3, [pc, #640]	; (80021e8 <HAL_RCC_OscConfig+0x61c>)
 8001f68:	2180      	movs	r1, #128	; 0x80
 8001f6a:	0049      	lsls	r1, r1, #1
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001f70:	f7fe fec0 	bl	8000cf4 <HAL_GetTick>
 8001f74:	0003      	movs	r3, r0
 8001f76:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7a:	f7fe febb 	bl	8000cf4 <HAL_GetTick>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e127      	b.n	80021dc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8c:	4b96      	ldr	r3, [pc, #600]	; (80021e8 <HAL_RCC_OscConfig+0x61c>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4013      	ands	r3, r2
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d106      	bne.n	8001fae <HAL_RCC_OscConfig+0x3e2>
 8001fa0:	4b90      	ldr	r3, [pc, #576]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 8001fa2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fa4:	4b8f      	ldr	r3, [pc, #572]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fac:	e01c      	b.n	8001fe8 <HAL_RCC_OscConfig+0x41c>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b05      	cmp	r3, #5
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x404>
 8001fb6:	4b8b      	ldr	r3, [pc, #556]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 8001fb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fba:	4b8a      	ldr	r3, [pc, #552]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 8001fbc:	2104      	movs	r1, #4
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fc2:	4b88      	ldr	r3, [pc, #544]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 8001fc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fc6:	4b87      	ldr	r3, [pc, #540]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 8001fc8:	2101      	movs	r1, #1
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fce:	e00b      	b.n	8001fe8 <HAL_RCC_OscConfig+0x41c>
 8001fd0:	4b84      	ldr	r3, [pc, #528]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 8001fd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fd4:	4b83      	ldr	r3, [pc, #524]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	438a      	bics	r2, r1
 8001fda:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fdc:	4b81      	ldr	r3, [pc, #516]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 8001fde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fe0:	4b80      	ldr	r3, [pc, #512]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 8001fe2:	2104      	movs	r1, #4
 8001fe4:	438a      	bics	r2, r1
 8001fe6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d014      	beq.n	800201a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff0:	f7fe fe80 	bl	8000cf4 <HAL_GetTick>
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff8:	e009      	b.n	800200e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffa:	f7fe fe7b 	bl	8000cf4 <HAL_GetTick>
 8001ffe:	0002      	movs	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	4a79      	ldr	r2, [pc, #484]	; (80021ec <HAL_RCC_OscConfig+0x620>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e0e6      	b.n	80021dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800200e:	4b75      	ldr	r3, [pc, #468]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 8002010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002012:	2202      	movs	r2, #2
 8002014:	4013      	ands	r3, r2
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x42e>
 8002018:	e013      	b.n	8002042 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201a:	f7fe fe6b 	bl	8000cf4 <HAL_GetTick>
 800201e:	0003      	movs	r3, r0
 8002020:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002022:	e009      	b.n	8002038 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002024:	f7fe fe66 	bl	8000cf4 <HAL_GetTick>
 8002028:	0002      	movs	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	4a6f      	ldr	r2, [pc, #444]	; (80021ec <HAL_RCC_OscConfig+0x620>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e0d1      	b.n	80021dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002038:	4b6a      	ldr	r3, [pc, #424]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 800203a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203c:	2202      	movs	r2, #2
 800203e:	4013      	ands	r3, r2
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002042:	231f      	movs	r3, #31
 8002044:	18fb      	adds	r3, r7, r3
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d105      	bne.n	8002058 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800204c:	4b65      	ldr	r3, [pc, #404]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 800204e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002050:	4b64      	ldr	r3, [pc, #400]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 8002052:	4967      	ldr	r1, [pc, #412]	; (80021f0 <HAL_RCC_OscConfig+0x624>)
 8002054:	400a      	ands	r2, r1
 8002056:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d100      	bne.n	8002062 <HAL_RCC_OscConfig+0x496>
 8002060:	e0bb      	b.n	80021da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002062:	4b60      	ldr	r3, [pc, #384]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2238      	movs	r2, #56	; 0x38
 8002068:	4013      	ands	r3, r2
 800206a:	2b10      	cmp	r3, #16
 800206c:	d100      	bne.n	8002070 <HAL_RCC_OscConfig+0x4a4>
 800206e:	e07b      	b.n	8002168 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	2b02      	cmp	r3, #2
 8002076:	d156      	bne.n	8002126 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002078:	4b5a      	ldr	r3, [pc, #360]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b59      	ldr	r3, [pc, #356]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 800207e:	495d      	ldr	r1, [pc, #372]	; (80021f4 <HAL_RCC_OscConfig+0x628>)
 8002080:	400a      	ands	r2, r1
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7fe fe36 	bl	8000cf4 <HAL_GetTick>
 8002088:	0003      	movs	r3, r0
 800208a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208e:	f7fe fe31 	bl	8000cf4 <HAL_GetTick>
 8002092:	0002      	movs	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e09d      	b.n	80021dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a0:	4b50      	ldr	r3, [pc, #320]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	049b      	lsls	r3, r3, #18
 80020a8:	4013      	ands	r3, r2
 80020aa:	d1f0      	bne.n	800208e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ac:	4b4d      	ldr	r3, [pc, #308]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a51      	ldr	r2, [pc, #324]	; (80021f8 <HAL_RCC_OscConfig+0x62c>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	0019      	movs	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1a      	ldr	r2, [r3, #32]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c4:	021b      	lsls	r3, r3, #8
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d8:	431a      	orrs	r2, r3
 80020da:	4b42      	ldr	r3, [pc, #264]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 80020dc:	430a      	orrs	r2, r1
 80020de:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e0:	4b40      	ldr	r3, [pc, #256]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b3f      	ldr	r3, [pc, #252]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 80020e6:	2180      	movs	r1, #128	; 0x80
 80020e8:	0449      	lsls	r1, r1, #17
 80020ea:	430a      	orrs	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80020ee:	4b3d      	ldr	r3, [pc, #244]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	4b3c      	ldr	r3, [pc, #240]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 80020f4:	2180      	movs	r1, #128	; 0x80
 80020f6:	0549      	lsls	r1, r1, #21
 80020f8:	430a      	orrs	r2, r1
 80020fa:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7fe fdfa 	bl	8000cf4 <HAL_GetTick>
 8002100:	0003      	movs	r3, r0
 8002102:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002106:	f7fe fdf5 	bl	8000cf4 <HAL_GetTick>
 800210a:	0002      	movs	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e061      	b.n	80021dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002118:	4b32      	ldr	r3, [pc, #200]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	049b      	lsls	r3, r3, #18
 8002120:	4013      	ands	r3, r2
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x53a>
 8002124:	e059      	b.n	80021da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002126:	4b2f      	ldr	r3, [pc, #188]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 800212c:	4931      	ldr	r1, [pc, #196]	; (80021f4 <HAL_RCC_OscConfig+0x628>)
 800212e:	400a      	ands	r2, r1
 8002130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002132:	f7fe fddf 	bl	8000cf4 <HAL_GetTick>
 8002136:	0003      	movs	r3, r0
 8002138:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213c:	f7fe fdda 	bl	8000cf4 <HAL_GetTick>
 8002140:	0002      	movs	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e046      	b.n	80021dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800214e:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	049b      	lsls	r3, r3, #18
 8002156:	4013      	ands	r3, r2
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800215a:	4b22      	ldr	r3, [pc, #136]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 8002160:	4926      	ldr	r1, [pc, #152]	; (80021fc <HAL_RCC_OscConfig+0x630>)
 8002162:	400a      	ands	r2, r1
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	e038      	b.n	80021da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e033      	b.n	80021dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_RCC_OscConfig+0x618>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	2203      	movs	r2, #3
 800217e:	401a      	ands	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	429a      	cmp	r2, r3
 8002186:	d126      	bne.n	80021d6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	2270      	movs	r2, #112	; 0x70
 800218c:	401a      	ands	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002192:	429a      	cmp	r2, r3
 8002194:	d11f      	bne.n	80021d6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	23fe      	movs	r3, #254	; 0xfe
 800219a:	01db      	lsls	r3, r3, #7
 800219c:	401a      	ands	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d116      	bne.n	80021d6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	23f8      	movs	r3, #248	; 0xf8
 80021ac:	039b      	lsls	r3, r3, #14
 80021ae:	401a      	ands	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d10e      	bne.n	80021d6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	23e0      	movs	r3, #224	; 0xe0
 80021bc:	051b      	lsls	r3, r3, #20
 80021be:	401a      	ands	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d106      	bne.n	80021d6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	0f5b      	lsrs	r3, r3, #29
 80021cc:	075a      	lsls	r2, r3, #29
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d001      	beq.n	80021da <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	0018      	movs	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	b008      	add	sp, #32
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40007000 	.word	0x40007000
 80021ec:	00001388 	.word	0x00001388
 80021f0:	efffffff 	.word	0xefffffff
 80021f4:	feffffff 	.word	0xfeffffff
 80021f8:	11c1808c 	.word	0x11c1808c
 80021fc:	eefefffc 	.word	0xeefefffc

08002200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0e9      	b.n	80023e8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002214:	4b76      	ldr	r3, [pc, #472]	; (80023f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2207      	movs	r2, #7
 800221a:	4013      	ands	r3, r2
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d91e      	bls.n	8002260 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002222:	4b73      	ldr	r3, [pc, #460]	; (80023f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2207      	movs	r2, #7
 8002228:	4393      	bics	r3, r2
 800222a:	0019      	movs	r1, r3
 800222c:	4b70      	ldr	r3, [pc, #448]	; (80023f0 <HAL_RCC_ClockConfig+0x1f0>)
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002234:	f7fe fd5e 	bl	8000cf4 <HAL_GetTick>
 8002238:	0003      	movs	r3, r0
 800223a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800223c:	e009      	b.n	8002252 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223e:	f7fe fd59 	bl	8000cf4 <HAL_GetTick>
 8002242:	0002      	movs	r2, r0
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	4a6a      	ldr	r2, [pc, #424]	; (80023f4 <HAL_RCC_ClockConfig+0x1f4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e0ca      	b.n	80023e8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002252:	4b67      	ldr	r3, [pc, #412]	; (80023f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2207      	movs	r2, #7
 8002258:	4013      	ands	r3, r2
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d1ee      	bne.n	800223e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2202      	movs	r2, #2
 8002266:	4013      	ands	r3, r2
 8002268:	d015      	beq.n	8002296 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2204      	movs	r2, #4
 8002270:	4013      	ands	r3, r2
 8002272:	d006      	beq.n	8002282 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002274:	4b60      	ldr	r3, [pc, #384]	; (80023f8 <HAL_RCC_ClockConfig+0x1f8>)
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	4b5f      	ldr	r3, [pc, #380]	; (80023f8 <HAL_RCC_ClockConfig+0x1f8>)
 800227a:	21e0      	movs	r1, #224	; 0xe0
 800227c:	01c9      	lsls	r1, r1, #7
 800227e:	430a      	orrs	r2, r1
 8002280:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002282:	4b5d      	ldr	r3, [pc, #372]	; (80023f8 <HAL_RCC_ClockConfig+0x1f8>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	4a5d      	ldr	r2, [pc, #372]	; (80023fc <HAL_RCC_ClockConfig+0x1fc>)
 8002288:	4013      	ands	r3, r2
 800228a:	0019      	movs	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	4b59      	ldr	r3, [pc, #356]	; (80023f8 <HAL_RCC_ClockConfig+0x1f8>)
 8002292:	430a      	orrs	r2, r1
 8002294:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2201      	movs	r2, #1
 800229c:	4013      	ands	r3, r2
 800229e:	d057      	beq.n	8002350 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d107      	bne.n	80022b8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a8:	4b53      	ldr	r3, [pc, #332]	; (80023f8 <HAL_RCC_ClockConfig+0x1f8>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	029b      	lsls	r3, r3, #10
 80022b0:	4013      	ands	r3, r2
 80022b2:	d12b      	bne.n	800230c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e097      	b.n	80023e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d107      	bne.n	80022d0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c0:	4b4d      	ldr	r3, [pc, #308]	; (80023f8 <HAL_RCC_ClockConfig+0x1f8>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	2380      	movs	r3, #128	; 0x80
 80022c6:	049b      	lsls	r3, r3, #18
 80022c8:	4013      	ands	r3, r2
 80022ca:	d11f      	bne.n	800230c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e08b      	b.n	80023e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d107      	bne.n	80022e8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022d8:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <HAL_RCC_ClockConfig+0x1f8>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4013      	ands	r3, r2
 80022e2:	d113      	bne.n	800230c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e07f      	b.n	80023e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d106      	bne.n	80022fe <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022f0:	4b41      	ldr	r3, [pc, #260]	; (80023f8 <HAL_RCC_ClockConfig+0x1f8>)
 80022f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f4:	2202      	movs	r2, #2
 80022f6:	4013      	ands	r3, r2
 80022f8:	d108      	bne.n	800230c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e074      	b.n	80023e8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022fe:	4b3e      	ldr	r3, [pc, #248]	; (80023f8 <HAL_RCC_ClockConfig+0x1f8>)
 8002300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002302:	2202      	movs	r2, #2
 8002304:	4013      	ands	r3, r2
 8002306:	d101      	bne.n	800230c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e06d      	b.n	80023e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800230c:	4b3a      	ldr	r3, [pc, #232]	; (80023f8 <HAL_RCC_ClockConfig+0x1f8>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2207      	movs	r2, #7
 8002312:	4393      	bics	r3, r2
 8002314:	0019      	movs	r1, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	4b37      	ldr	r3, [pc, #220]	; (80023f8 <HAL_RCC_ClockConfig+0x1f8>)
 800231c:	430a      	orrs	r2, r1
 800231e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002320:	f7fe fce8 	bl	8000cf4 <HAL_GetTick>
 8002324:	0003      	movs	r3, r0
 8002326:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002328:	e009      	b.n	800233e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800232a:	f7fe fce3 	bl	8000cf4 <HAL_GetTick>
 800232e:	0002      	movs	r2, r0
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	4a2f      	ldr	r2, [pc, #188]	; (80023f4 <HAL_RCC_ClockConfig+0x1f4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e054      	b.n	80023e8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	4b2e      	ldr	r3, [pc, #184]	; (80023f8 <HAL_RCC_ClockConfig+0x1f8>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2238      	movs	r2, #56	; 0x38
 8002344:	401a      	ands	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	429a      	cmp	r2, r3
 800234e:	d1ec      	bne.n	800232a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002350:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2207      	movs	r2, #7
 8002356:	4013      	ands	r3, r2
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d21e      	bcs.n	800239c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2207      	movs	r2, #7
 8002364:	4393      	bics	r3, r2
 8002366:	0019      	movs	r1, r3
 8002368:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <HAL_RCC_ClockConfig+0x1f0>)
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002370:	f7fe fcc0 	bl	8000cf4 <HAL_GetTick>
 8002374:	0003      	movs	r3, r0
 8002376:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002378:	e009      	b.n	800238e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800237a:	f7fe fcbb 	bl	8000cf4 <HAL_GetTick>
 800237e:	0002      	movs	r2, r0
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	4a1b      	ldr	r2, [pc, #108]	; (80023f4 <HAL_RCC_ClockConfig+0x1f4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d901      	bls.n	800238e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e02c      	b.n	80023e8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800238e:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2207      	movs	r2, #7
 8002394:	4013      	ands	r3, r2
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d1ee      	bne.n	800237a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2204      	movs	r2, #4
 80023a2:	4013      	ands	r3, r2
 80023a4:	d009      	beq.n	80023ba <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80023a6:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <HAL_RCC_ClockConfig+0x1f8>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	4a15      	ldr	r2, [pc, #84]	; (8002400 <HAL_RCC_ClockConfig+0x200>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	0019      	movs	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <HAL_RCC_ClockConfig+0x1f8>)
 80023b6:	430a      	orrs	r2, r1
 80023b8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80023ba:	f000 f829 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 80023be:	0001      	movs	r1, r0
 80023c0:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <HAL_RCC_ClockConfig+0x1f8>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	0a1b      	lsrs	r3, r3, #8
 80023c6:	220f      	movs	r2, #15
 80023c8:	401a      	ands	r2, r3
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <HAL_RCC_ClockConfig+0x204>)
 80023cc:	0092      	lsls	r2, r2, #2
 80023ce:	58d3      	ldr	r3, [r2, r3]
 80023d0:	221f      	movs	r2, #31
 80023d2:	4013      	ands	r3, r2
 80023d4:	000a      	movs	r2, r1
 80023d6:	40da      	lsrs	r2, r3
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <HAL_RCC_ClockConfig+0x208>)
 80023da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_RCC_ClockConfig+0x20c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f7fe fc2b 	bl	8000c3c <HAL_InitTick>
 80023e6:	0003      	movs	r3, r0
}
 80023e8:	0018      	movs	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b004      	add	sp, #16
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40022000 	.word	0x40022000
 80023f4:	00001388 	.word	0x00001388
 80023f8:	40021000 	.word	0x40021000
 80023fc:	fffff0ff 	.word	0xfffff0ff
 8002400:	ffff8fff 	.word	0xffff8fff
 8002404:	08003758 	.word	0x08003758
 8002408:	20000000 	.word	0x20000000
 800240c:	20000004 	.word	0x20000004

08002410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002416:	4b3c      	ldr	r3, [pc, #240]	; (8002508 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2238      	movs	r2, #56	; 0x38
 800241c:	4013      	ands	r3, r2
 800241e:	d10f      	bne.n	8002440 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002420:	4b39      	ldr	r3, [pc, #228]	; (8002508 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	0adb      	lsrs	r3, r3, #11
 8002426:	2207      	movs	r2, #7
 8002428:	4013      	ands	r3, r2
 800242a:	2201      	movs	r2, #1
 800242c:	409a      	lsls	r2, r3
 800242e:	0013      	movs	r3, r2
 8002430:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002432:	6839      	ldr	r1, [r7, #0]
 8002434:	4835      	ldr	r0, [pc, #212]	; (800250c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002436:	f7fd fe6d 	bl	8000114 <__udivsi3>
 800243a:	0003      	movs	r3, r0
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	e05d      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002440:	4b31      	ldr	r3, [pc, #196]	; (8002508 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2238      	movs	r2, #56	; 0x38
 8002446:	4013      	ands	r3, r2
 8002448:	2b08      	cmp	r3, #8
 800244a:	d102      	bne.n	8002452 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800244c:	4b30      	ldr	r3, [pc, #192]	; (8002510 <HAL_RCC_GetSysClockFreq+0x100>)
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	e054      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002452:	4b2d      	ldr	r3, [pc, #180]	; (8002508 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2238      	movs	r2, #56	; 0x38
 8002458:	4013      	ands	r3, r2
 800245a:	2b10      	cmp	r3, #16
 800245c:	d138      	bne.n	80024d0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800245e:	4b2a      	ldr	r3, [pc, #168]	; (8002508 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2203      	movs	r2, #3
 8002464:	4013      	ands	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002468:	4b27      	ldr	r3, [pc, #156]	; (8002508 <HAL_RCC_GetSysClockFreq+0xf8>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	2207      	movs	r2, #7
 8002470:	4013      	ands	r3, r2
 8002472:	3301      	adds	r3, #1
 8002474:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d10d      	bne.n	8002498 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	4824      	ldr	r0, [pc, #144]	; (8002510 <HAL_RCC_GetSysClockFreq+0x100>)
 8002480:	f7fd fe48 	bl	8000114 <__udivsi3>
 8002484:	0003      	movs	r3, r0
 8002486:	0019      	movs	r1, r3
 8002488:	4b1f      	ldr	r3, [pc, #124]	; (8002508 <HAL_RCC_GetSysClockFreq+0xf8>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	0a1b      	lsrs	r3, r3, #8
 800248e:	227f      	movs	r2, #127	; 0x7f
 8002490:	4013      	ands	r3, r2
 8002492:	434b      	muls	r3, r1
 8002494:	617b      	str	r3, [r7, #20]
        break;
 8002496:	e00d      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	481c      	ldr	r0, [pc, #112]	; (800250c <HAL_RCC_GetSysClockFreq+0xfc>)
 800249c:	f7fd fe3a 	bl	8000114 <__udivsi3>
 80024a0:	0003      	movs	r3, r0
 80024a2:	0019      	movs	r1, r3
 80024a4:	4b18      	ldr	r3, [pc, #96]	; (8002508 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	227f      	movs	r2, #127	; 0x7f
 80024ac:	4013      	ands	r3, r2
 80024ae:	434b      	muls	r3, r1
 80024b0:	617b      	str	r3, [r7, #20]
        break;
 80024b2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80024b4:	4b14      	ldr	r3, [pc, #80]	; (8002508 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	0f5b      	lsrs	r3, r3, #29
 80024ba:	2207      	movs	r2, #7
 80024bc:	4013      	ands	r3, r2
 80024be:	3301      	adds	r3, #1
 80024c0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	6978      	ldr	r0, [r7, #20]
 80024c6:	f7fd fe25 	bl	8000114 <__udivsi3>
 80024ca:	0003      	movs	r3, r0
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	e015      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80024d0:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2238      	movs	r2, #56	; 0x38
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b20      	cmp	r3, #32
 80024da:	d103      	bne.n	80024e4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	e00b      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	2238      	movs	r2, #56	; 0x38
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b18      	cmp	r3, #24
 80024ee:	d103      	bne.n	80024f8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80024f0:	23fa      	movs	r3, #250	; 0xfa
 80024f2:	01db      	lsls	r3, r3, #7
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	e001      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80024fc:	693b      	ldr	r3, [r7, #16]
}
 80024fe:	0018      	movs	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	b006      	add	sp, #24
 8002504:	bd80      	pop	{r7, pc}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	40021000 	.word	0x40021000
 800250c:	00f42400 	.word	0x00f42400
 8002510:	007a1200 	.word	0x007a1200

08002514 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002518:	4b02      	ldr	r3, [pc, #8]	; (8002524 <HAL_RCC_GetHCLKFreq+0x10>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	0018      	movs	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	20000000 	.word	0x20000000

08002528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002528:	b5b0      	push	{r4, r5, r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800252c:	f7ff fff2 	bl	8002514 <HAL_RCC_GetHCLKFreq>
 8002530:	0004      	movs	r4, r0
 8002532:	f7ff fb3f 	bl	8001bb4 <LL_RCC_GetAPB1Prescaler>
 8002536:	0003      	movs	r3, r0
 8002538:	0b1a      	lsrs	r2, r3, #12
 800253a:	4b05      	ldr	r3, [pc, #20]	; (8002550 <HAL_RCC_GetPCLK1Freq+0x28>)
 800253c:	0092      	lsls	r2, r2, #2
 800253e:	58d3      	ldr	r3, [r2, r3]
 8002540:	221f      	movs	r2, #31
 8002542:	4013      	ands	r3, r2
 8002544:	40dc      	lsrs	r4, r3
 8002546:	0023      	movs	r3, r4
}
 8002548:	0018      	movs	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	bdb0      	pop	{r4, r5, r7, pc}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	08003798 	.word	0x08003798

08002554 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800255c:	2313      	movs	r3, #19
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002564:	2312      	movs	r3, #18
 8002566:	18fb      	adds	r3, r7, r3
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	029b      	lsls	r3, r3, #10
 8002574:	4013      	ands	r3, r2
 8002576:	d100      	bne.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002578:	e0a3      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800257a:	2011      	movs	r0, #17
 800257c:	183b      	adds	r3, r7, r0
 800257e:	2200      	movs	r2, #0
 8002580:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002582:	4bc3      	ldr	r3, [pc, #780]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002584:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002586:	2380      	movs	r3, #128	; 0x80
 8002588:	055b      	lsls	r3, r3, #21
 800258a:	4013      	ands	r3, r2
 800258c:	d110      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800258e:	4bc0      	ldr	r3, [pc, #768]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002590:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002592:	4bbf      	ldr	r3, [pc, #764]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002594:	2180      	movs	r1, #128	; 0x80
 8002596:	0549      	lsls	r1, r1, #21
 8002598:	430a      	orrs	r2, r1
 800259a:	63da      	str	r2, [r3, #60]	; 0x3c
 800259c:	4bbc      	ldr	r3, [pc, #752]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800259e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025a0:	2380      	movs	r3, #128	; 0x80
 80025a2:	055b      	lsls	r3, r3, #21
 80025a4:	4013      	ands	r3, r2
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025aa:	183b      	adds	r3, r7, r0
 80025ac:	2201      	movs	r2, #1
 80025ae:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025b0:	4bb8      	ldr	r3, [pc, #736]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4bb7      	ldr	r3, [pc, #732]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80025b6:	2180      	movs	r1, #128	; 0x80
 80025b8:	0049      	lsls	r1, r1, #1
 80025ba:	430a      	orrs	r2, r1
 80025bc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025be:	f7fe fb99 	bl	8000cf4 <HAL_GetTick>
 80025c2:	0003      	movs	r3, r0
 80025c4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025c6:	e00b      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c8:	f7fe fb94 	bl	8000cf4 <HAL_GetTick>
 80025cc:	0002      	movs	r2, r0
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d904      	bls.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80025d6:	2313      	movs	r3, #19
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	2203      	movs	r2, #3
 80025dc:	701a      	strb	r2, [r3, #0]
        break;
 80025de:	e005      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025e0:	4bac      	ldr	r3, [pc, #688]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	2380      	movs	r3, #128	; 0x80
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4013      	ands	r3, r2
 80025ea:	d0ed      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80025ec:	2313      	movs	r3, #19
 80025ee:	18fb      	adds	r3, r7, r3
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d154      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025f6:	4ba6      	ldr	r3, [pc, #664]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025fa:	23c0      	movs	r3, #192	; 0xc0
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4013      	ands	r3, r2
 8002600:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d019      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	429a      	cmp	r2, r3
 8002610:	d014      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002612:	4b9f      	ldr	r3, [pc, #636]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002616:	4aa0      	ldr	r2, [pc, #640]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002618:	4013      	ands	r3, r2
 800261a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800261c:	4b9c      	ldr	r3, [pc, #624]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800261e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002620:	4b9b      	ldr	r3, [pc, #620]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002622:	2180      	movs	r1, #128	; 0x80
 8002624:	0249      	lsls	r1, r1, #9
 8002626:	430a      	orrs	r2, r1
 8002628:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800262a:	4b99      	ldr	r3, [pc, #612]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800262c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800262e:	4b98      	ldr	r3, [pc, #608]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002630:	499a      	ldr	r1, [pc, #616]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002632:	400a      	ands	r2, r1
 8002634:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002636:	4b96      	ldr	r3, [pc, #600]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2201      	movs	r2, #1
 8002640:	4013      	ands	r3, r2
 8002642:	d016      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002644:	f7fe fb56 	bl	8000cf4 <HAL_GetTick>
 8002648:	0003      	movs	r3, r0
 800264a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800264c:	e00c      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264e:	f7fe fb51 	bl	8000cf4 <HAL_GetTick>
 8002652:	0002      	movs	r2, r0
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	4a91      	ldr	r2, [pc, #580]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d904      	bls.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800265e:	2313      	movs	r3, #19
 8002660:	18fb      	adds	r3, r7, r3
 8002662:	2203      	movs	r2, #3
 8002664:	701a      	strb	r2, [r3, #0]
            break;
 8002666:	e004      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002668:	4b89      	ldr	r3, [pc, #548]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800266a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266c:	2202      	movs	r2, #2
 800266e:	4013      	ands	r3, r2
 8002670:	d0ed      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002672:	2313      	movs	r3, #19
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10a      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800267c:	4b84      	ldr	r3, [pc, #528]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800267e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002680:	4a85      	ldr	r2, [pc, #532]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002682:	4013      	ands	r3, r2
 8002684:	0019      	movs	r1, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800268a:	4b81      	ldr	r3, [pc, #516]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800268c:	430a      	orrs	r2, r1
 800268e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002690:	e00c      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002692:	2312      	movs	r3, #18
 8002694:	18fb      	adds	r3, r7, r3
 8002696:	2213      	movs	r2, #19
 8002698:	18ba      	adds	r2, r7, r2
 800269a:	7812      	ldrb	r2, [r2, #0]
 800269c:	701a      	strb	r2, [r3, #0]
 800269e:	e005      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026a0:	2312      	movs	r3, #18
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	2213      	movs	r2, #19
 80026a6:	18ba      	adds	r2, r7, r2
 80026a8:	7812      	ldrb	r2, [r2, #0]
 80026aa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026ac:	2311      	movs	r3, #17
 80026ae:	18fb      	adds	r3, r7, r3
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d105      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b6:	4b76      	ldr	r3, [pc, #472]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026ba:	4b75      	ldr	r3, [pc, #468]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026bc:	4979      	ldr	r1, [pc, #484]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80026be:	400a      	ands	r2, r1
 80026c0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2201      	movs	r2, #1
 80026c8:	4013      	ands	r3, r2
 80026ca:	d009      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026cc:	4b70      	ldr	r3, [pc, #448]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d0:	2203      	movs	r2, #3
 80026d2:	4393      	bics	r3, r2
 80026d4:	0019      	movs	r1, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	4b6d      	ldr	r3, [pc, #436]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026dc:	430a      	orrs	r2, r1
 80026de:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2202      	movs	r2, #2
 80026e6:	4013      	ands	r3, r2
 80026e8:	d009      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026ea:	4b69      	ldr	r3, [pc, #420]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	220c      	movs	r2, #12
 80026f0:	4393      	bics	r3, r2
 80026f2:	0019      	movs	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	4b65      	ldr	r3, [pc, #404]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026fa:	430a      	orrs	r2, r1
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2210      	movs	r2, #16
 8002704:	4013      	ands	r3, r2
 8002706:	d009      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002708:	4b61      	ldr	r3, [pc, #388]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800270a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270c:	4a66      	ldr	r2, [pc, #408]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800270e:	4013      	ands	r3, r2
 8002710:	0019      	movs	r1, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	4b5e      	ldr	r3, [pc, #376]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002718:	430a      	orrs	r2, r1
 800271a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4013      	ands	r3, r2
 8002726:	d009      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002728:	4b59      	ldr	r3, [pc, #356]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800272a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272c:	4a5f      	ldr	r2, [pc, #380]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800272e:	4013      	ands	r3, r2
 8002730:	0019      	movs	r1, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	4b56      	ldr	r3, [pc, #344]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002738:	430a      	orrs	r2, r1
 800273a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	2380      	movs	r3, #128	; 0x80
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4013      	ands	r3, r2
 8002746:	d009      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002748:	4b51      	ldr	r3, [pc, #324]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800274a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274c:	4a58      	ldr	r2, [pc, #352]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800274e:	4013      	ands	r3, r2
 8002750:	0019      	movs	r1, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69da      	ldr	r2, [r3, #28]
 8002756:	4b4e      	ldr	r3, [pc, #312]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002758:	430a      	orrs	r2, r1
 800275a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2220      	movs	r2, #32
 8002762:	4013      	ands	r3, r2
 8002764:	d009      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002766:	4b4a      	ldr	r3, [pc, #296]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276a:	4a52      	ldr	r2, [pc, #328]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800276c:	4013      	ands	r3, r2
 800276e:	0019      	movs	r1, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	4b46      	ldr	r3, [pc, #280]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002776:	430a      	orrs	r2, r1
 8002778:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	01db      	lsls	r3, r3, #7
 8002782:	4013      	ands	r3, r2
 8002784:	d015      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002786:	4b42      	ldr	r3, [pc, #264]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	0899      	lsrs	r1, r3, #2
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1a      	ldr	r2, [r3, #32]
 8002792:	4b3f      	ldr	r3, [pc, #252]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002794:	430a      	orrs	r2, r1
 8002796:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1a      	ldr	r2, [r3, #32]
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	05db      	lsls	r3, r3, #23
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d106      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80027a4:	4b3a      	ldr	r3, [pc, #232]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	4b39      	ldr	r3, [pc, #228]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027aa:	2180      	movs	r1, #128	; 0x80
 80027ac:	0249      	lsls	r1, r1, #9
 80027ae:	430a      	orrs	r2, r1
 80027b0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	031b      	lsls	r3, r3, #12
 80027ba:	4013      	ands	r3, r2
 80027bc:	d009      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027be:	4b34      	ldr	r3, [pc, #208]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c2:	2240      	movs	r2, #64	; 0x40
 80027c4:	4393      	bics	r3, r2
 80027c6:	0019      	movs	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027cc:	4b30      	ldr	r3, [pc, #192]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027ce:	430a      	orrs	r2, r1
 80027d0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	039b      	lsls	r3, r3, #14
 80027da:	4013      	ands	r3, r2
 80027dc:	d016      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80027de:	4b2c      	ldr	r3, [pc, #176]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e2:	4a35      	ldr	r2, [pc, #212]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	0019      	movs	r1, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027ec:	4b28      	ldr	r3, [pc, #160]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027ee:	430a      	orrs	r2, r1
 80027f0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027f6:	2380      	movs	r3, #128	; 0x80
 80027f8:	03db      	lsls	r3, r3, #15
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d106      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80027fe:	4b24      	ldr	r3, [pc, #144]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	4b23      	ldr	r3, [pc, #140]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002804:	2180      	movs	r1, #128	; 0x80
 8002806:	0449      	lsls	r1, r1, #17
 8002808:	430a      	orrs	r2, r1
 800280a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	03db      	lsls	r3, r3, #15
 8002814:	4013      	ands	r3, r2
 8002816:	d016      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002818:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800281a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281c:	4a27      	ldr	r2, [pc, #156]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800281e:	4013      	ands	r3, r2
 8002820:	0019      	movs	r1, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002826:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002828:	430a      	orrs	r2, r1
 800282a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	045b      	lsls	r3, r3, #17
 8002834:	429a      	cmp	r2, r3
 8002836:	d106      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002838:	4b15      	ldr	r3, [pc, #84]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	4b14      	ldr	r3, [pc, #80]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800283e:	2180      	movs	r1, #128	; 0x80
 8002840:	0449      	lsls	r1, r1, #17
 8002842:	430a      	orrs	r2, r1
 8002844:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	4013      	ands	r3, r2
 8002850:	d016      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002852:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002856:	4a1a      	ldr	r2, [pc, #104]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002858:	4013      	ands	r3, r2
 800285a:	0019      	movs	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002862:	430a      	orrs	r2, r1
 8002864:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	01db      	lsls	r3, r3, #7
 800286e:	429a      	cmp	r2, r3
 8002870:	d106      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002872:	4b07      	ldr	r3, [pc, #28]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002878:	2180      	movs	r1, #128	; 0x80
 800287a:	0249      	lsls	r1, r1, #9
 800287c:	430a      	orrs	r2, r1
 800287e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002880:	2312      	movs	r3, #18
 8002882:	18fb      	adds	r3, r7, r3
 8002884:	781b      	ldrb	r3, [r3, #0]
}
 8002886:	0018      	movs	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	b006      	add	sp, #24
 800288c:	bd80      	pop	{r7, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	40021000 	.word	0x40021000
 8002894:	40007000 	.word	0x40007000
 8002898:	fffffcff 	.word	0xfffffcff
 800289c:	fffeffff 	.word	0xfffeffff
 80028a0:	00001388 	.word	0x00001388
 80028a4:	efffffff 	.word	0xefffffff
 80028a8:	fffff3ff 	.word	0xfffff3ff
 80028ac:	fff3ffff 	.word	0xfff3ffff
 80028b0:	ffcfffff 	.word	0xffcfffff
 80028b4:	ffffcfff 	.word	0xffffcfff
 80028b8:	ffbfffff 	.word	0xffbfffff
 80028bc:	feffffff 	.word	0xfeffffff
 80028c0:	ffff3fff 	.word	0xffff3fff

080028c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e046      	b.n	8002964 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2288      	movs	r2, #136	; 0x88
 80028da:	589b      	ldr	r3, [r3, r2]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d107      	bne.n	80028f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2284      	movs	r2, #132	; 0x84
 80028e4:	2100      	movs	r1, #0
 80028e6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	0018      	movs	r0, r3
 80028ec:	f7fe f8e0 	bl	8000ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2288      	movs	r2, #136	; 0x88
 80028f4:	2124      	movs	r1, #36	; 0x24
 80028f6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2101      	movs	r1, #1
 8002904:	438a      	bics	r2, r1
 8002906:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	0018      	movs	r0, r3
 8002914:	f000 fb8e 	bl	8003034 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	0018      	movs	r0, r3
 800291c:	f000 f8cc 	bl	8002ab8 <UART_SetConfig>
 8002920:	0003      	movs	r3, r0
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e01c      	b.n	8002964 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	490d      	ldr	r1, [pc, #52]	; (800296c <HAL_UART_Init+0xa8>)
 8002936:	400a      	ands	r2, r1
 8002938:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	212a      	movs	r1, #42	; 0x2a
 8002946:	438a      	bics	r2, r1
 8002948:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2101      	movs	r1, #1
 8002956:	430a      	orrs	r2, r1
 8002958:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	0018      	movs	r0, r3
 800295e:	f000 fc1d 	bl	800319c <UART_CheckIdleState>
 8002962:	0003      	movs	r3, r0
}
 8002964:	0018      	movs	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	b002      	add	sp, #8
 800296a:	bd80      	pop	{r7, pc}
 800296c:	ffffb7ff 	.word	0xffffb7ff

08002970 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af02      	add	r7, sp, #8
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	1dbb      	adds	r3, r7, #6
 800297e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2288      	movs	r2, #136	; 0x88
 8002984:	589b      	ldr	r3, [r3, r2]
 8002986:	2b20      	cmp	r3, #32
 8002988:	d000      	beq.n	800298c <HAL_UART_Transmit+0x1c>
 800298a:	e090      	b.n	8002aae <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_UART_Transmit+0x2a>
 8002992:	1dbb      	adds	r3, r7, #6
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e088      	b.n	8002ab0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	015b      	lsls	r3, r3, #5
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d109      	bne.n	80029be <HAL_UART_Transmit+0x4e>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d105      	bne.n	80029be <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2201      	movs	r2, #1
 80029b6:	4013      	ands	r3, r2
 80029b8:	d001      	beq.n	80029be <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e078      	b.n	8002ab0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2290      	movs	r2, #144	; 0x90
 80029c2:	2100      	movs	r1, #0
 80029c4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2288      	movs	r2, #136	; 0x88
 80029ca:	2121      	movs	r1, #33	; 0x21
 80029cc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ce:	f7fe f991 	bl	8000cf4 <HAL_GetTick>
 80029d2:	0003      	movs	r3, r0
 80029d4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1dba      	adds	r2, r7, #6
 80029da:	2154      	movs	r1, #84	; 0x54
 80029dc:	8812      	ldrh	r2, [r2, #0]
 80029de:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	1dba      	adds	r2, r7, #6
 80029e4:	2156      	movs	r1, #86	; 0x56
 80029e6:	8812      	ldrh	r2, [r2, #0]
 80029e8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	2380      	movs	r3, #128	; 0x80
 80029f0:	015b      	lsls	r3, r3, #5
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d108      	bne.n	8002a08 <HAL_UART_Transmit+0x98>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d104      	bne.n	8002a08 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	61bb      	str	r3, [r7, #24]
 8002a06:	e003      	b.n	8002a10 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a10:	e030      	b.n	8002a74 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	0013      	movs	r3, r2
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2180      	movs	r1, #128	; 0x80
 8002a20:	f000 fc66 	bl	80032f0 <UART_WaitOnFlagUntilTimeout>
 8002a24:	1e03      	subs	r3, r0, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2288      	movs	r2, #136	; 0x88
 8002a2c:	2120      	movs	r1, #32
 8002a2e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e03d      	b.n	8002ab0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10b      	bne.n	8002a52 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	001a      	movs	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	05d2      	lsls	r2, r2, #23
 8002a46:	0dd2      	lsrs	r2, r2, #23
 8002a48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	3302      	adds	r3, #2
 8002a4e:	61bb      	str	r3, [r7, #24]
 8002a50:	e007      	b.n	8002a62 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	781a      	ldrb	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2256      	movs	r2, #86	; 0x56
 8002a66:	5a9b      	ldrh	r3, [r3, r2]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b299      	uxth	r1, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2256      	movs	r2, #86	; 0x56
 8002a72:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2256      	movs	r2, #86	; 0x56
 8002a78:	5a9b      	ldrh	r3, [r3, r2]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1c8      	bne.n	8002a12 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	0013      	movs	r3, r2
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2140      	movs	r1, #64	; 0x40
 8002a8e:	f000 fc2f 	bl	80032f0 <UART_WaitOnFlagUntilTimeout>
 8002a92:	1e03      	subs	r3, r0, #0
 8002a94:	d005      	beq.n	8002aa2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2288      	movs	r2, #136	; 0x88
 8002a9a:	2120      	movs	r1, #32
 8002a9c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e006      	b.n	8002ab0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2288      	movs	r2, #136	; 0x88
 8002aa6:	2120      	movs	r1, #32
 8002aa8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e000      	b.n	8002ab0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002aae:	2302      	movs	r3, #2
  }
}
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b008      	add	sp, #32
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ab8:	b5b0      	push	{r4, r5, r7, lr}
 8002aba:	b090      	sub	sp, #64	; 0x40
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ac0:	231a      	movs	r3, #26
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	189b      	adds	r3, r3, r2
 8002ac6:	19db      	adds	r3, r3, r7
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4aaf      	ldr	r2, [pc, #700]	; (8002da8 <UART_SetConfig+0x2f0>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	0019      	movs	r1, r3
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af6:	430b      	orrs	r3, r1
 8002af8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	4aaa      	ldr	r2, [pc, #680]	; (8002dac <UART_SetConfig+0x2f4>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	0018      	movs	r0, r3
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	68d9      	ldr	r1, [r3, #12]
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	0003      	movs	r3, r0
 8002b10:	430b      	orrs	r3, r1
 8002b12:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4aa4      	ldr	r2, [pc, #656]	; (8002db0 <UART_SetConfig+0x2f8>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d004      	beq.n	8002b2e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4a9f      	ldr	r2, [pc, #636]	; (8002db4 <UART_SetConfig+0x2fc>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	0019      	movs	r1, r3
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b40:	430b      	orrs	r3, r1
 8002b42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	220f      	movs	r2, #15
 8002b4c:	4393      	bics	r3, r2
 8002b4e:	0018      	movs	r0, r3
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	0003      	movs	r3, r0
 8002b5a:	430b      	orrs	r3, r1
 8002b5c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a95      	ldr	r2, [pc, #596]	; (8002db8 <UART_SetConfig+0x300>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d131      	bne.n	8002bcc <UART_SetConfig+0x114>
 8002b68:	4b94      	ldr	r3, [pc, #592]	; (8002dbc <UART_SetConfig+0x304>)
 8002b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d01d      	beq.n	8002bb0 <UART_SetConfig+0xf8>
 8002b74:	d823      	bhi.n	8002bbe <UART_SetConfig+0x106>
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d00c      	beq.n	8002b94 <UART_SetConfig+0xdc>
 8002b7a:	d820      	bhi.n	8002bbe <UART_SetConfig+0x106>
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <UART_SetConfig+0xce>
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d00e      	beq.n	8002ba2 <UART_SetConfig+0xea>
 8002b84:	e01b      	b.n	8002bbe <UART_SetConfig+0x106>
 8002b86:	231b      	movs	r3, #27
 8002b88:	2220      	movs	r2, #32
 8002b8a:	189b      	adds	r3, r3, r2
 8002b8c:	19db      	adds	r3, r3, r7
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	e0b4      	b.n	8002cfe <UART_SetConfig+0x246>
 8002b94:	231b      	movs	r3, #27
 8002b96:	2220      	movs	r2, #32
 8002b98:	189b      	adds	r3, r3, r2
 8002b9a:	19db      	adds	r3, r3, r7
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	701a      	strb	r2, [r3, #0]
 8002ba0:	e0ad      	b.n	8002cfe <UART_SetConfig+0x246>
 8002ba2:	231b      	movs	r3, #27
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	189b      	adds	r3, r3, r2
 8002ba8:	19db      	adds	r3, r3, r7
 8002baa:	2204      	movs	r2, #4
 8002bac:	701a      	strb	r2, [r3, #0]
 8002bae:	e0a6      	b.n	8002cfe <UART_SetConfig+0x246>
 8002bb0:	231b      	movs	r3, #27
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	189b      	adds	r3, r3, r2
 8002bb6:	19db      	adds	r3, r3, r7
 8002bb8:	2208      	movs	r2, #8
 8002bba:	701a      	strb	r2, [r3, #0]
 8002bbc:	e09f      	b.n	8002cfe <UART_SetConfig+0x246>
 8002bbe:	231b      	movs	r3, #27
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	189b      	adds	r3, r3, r2
 8002bc4:	19db      	adds	r3, r3, r7
 8002bc6:	2210      	movs	r2, #16
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	e098      	b.n	8002cfe <UART_SetConfig+0x246>
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a7b      	ldr	r2, [pc, #492]	; (8002dc0 <UART_SetConfig+0x308>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d131      	bne.n	8002c3a <UART_SetConfig+0x182>
 8002bd6:	4b79      	ldr	r3, [pc, #484]	; (8002dbc <UART_SetConfig+0x304>)
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bda:	220c      	movs	r2, #12
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b0c      	cmp	r3, #12
 8002be0:	d01d      	beq.n	8002c1e <UART_SetConfig+0x166>
 8002be2:	d823      	bhi.n	8002c2c <UART_SetConfig+0x174>
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d00c      	beq.n	8002c02 <UART_SetConfig+0x14a>
 8002be8:	d820      	bhi.n	8002c2c <UART_SetConfig+0x174>
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <UART_SetConfig+0x13c>
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d00e      	beq.n	8002c10 <UART_SetConfig+0x158>
 8002bf2:	e01b      	b.n	8002c2c <UART_SetConfig+0x174>
 8002bf4:	231b      	movs	r3, #27
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	189b      	adds	r3, r3, r2
 8002bfa:	19db      	adds	r3, r3, r7
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
 8002c00:	e07d      	b.n	8002cfe <UART_SetConfig+0x246>
 8002c02:	231b      	movs	r3, #27
 8002c04:	2220      	movs	r2, #32
 8002c06:	189b      	adds	r3, r3, r2
 8002c08:	19db      	adds	r3, r3, r7
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	701a      	strb	r2, [r3, #0]
 8002c0e:	e076      	b.n	8002cfe <UART_SetConfig+0x246>
 8002c10:	231b      	movs	r3, #27
 8002c12:	2220      	movs	r2, #32
 8002c14:	189b      	adds	r3, r3, r2
 8002c16:	19db      	adds	r3, r3, r7
 8002c18:	2204      	movs	r2, #4
 8002c1a:	701a      	strb	r2, [r3, #0]
 8002c1c:	e06f      	b.n	8002cfe <UART_SetConfig+0x246>
 8002c1e:	231b      	movs	r3, #27
 8002c20:	2220      	movs	r2, #32
 8002c22:	189b      	adds	r3, r3, r2
 8002c24:	19db      	adds	r3, r3, r7
 8002c26:	2208      	movs	r2, #8
 8002c28:	701a      	strb	r2, [r3, #0]
 8002c2a:	e068      	b.n	8002cfe <UART_SetConfig+0x246>
 8002c2c:	231b      	movs	r3, #27
 8002c2e:	2220      	movs	r2, #32
 8002c30:	189b      	adds	r3, r3, r2
 8002c32:	19db      	adds	r3, r3, r7
 8002c34:	2210      	movs	r2, #16
 8002c36:	701a      	strb	r2, [r3, #0]
 8002c38:	e061      	b.n	8002cfe <UART_SetConfig+0x246>
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a61      	ldr	r2, [pc, #388]	; (8002dc4 <UART_SetConfig+0x30c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d106      	bne.n	8002c52 <UART_SetConfig+0x19a>
 8002c44:	231b      	movs	r3, #27
 8002c46:	2220      	movs	r2, #32
 8002c48:	189b      	adds	r3, r3, r2
 8002c4a:	19db      	adds	r3, r3, r7
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	701a      	strb	r2, [r3, #0]
 8002c50:	e055      	b.n	8002cfe <UART_SetConfig+0x246>
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a5c      	ldr	r2, [pc, #368]	; (8002dc8 <UART_SetConfig+0x310>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d106      	bne.n	8002c6a <UART_SetConfig+0x1b2>
 8002c5c:	231b      	movs	r3, #27
 8002c5e:	2220      	movs	r2, #32
 8002c60:	189b      	adds	r3, r3, r2
 8002c62:	19db      	adds	r3, r3, r7
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
 8002c68:	e049      	b.n	8002cfe <UART_SetConfig+0x246>
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a50      	ldr	r2, [pc, #320]	; (8002db0 <UART_SetConfig+0x2f8>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d13e      	bne.n	8002cf2 <UART_SetConfig+0x23a>
 8002c74:	4b51      	ldr	r3, [pc, #324]	; (8002dbc <UART_SetConfig+0x304>)
 8002c76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c78:	23c0      	movs	r3, #192	; 0xc0
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	22c0      	movs	r2, #192	; 0xc0
 8002c80:	0112      	lsls	r2, r2, #4
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d027      	beq.n	8002cd6 <UART_SetConfig+0x21e>
 8002c86:	22c0      	movs	r2, #192	; 0xc0
 8002c88:	0112      	lsls	r2, r2, #4
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d82a      	bhi.n	8002ce4 <UART_SetConfig+0x22c>
 8002c8e:	2280      	movs	r2, #128	; 0x80
 8002c90:	0112      	lsls	r2, r2, #4
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d011      	beq.n	8002cba <UART_SetConfig+0x202>
 8002c96:	2280      	movs	r2, #128	; 0x80
 8002c98:	0112      	lsls	r2, r2, #4
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d822      	bhi.n	8002ce4 <UART_SetConfig+0x22c>
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d004      	beq.n	8002cac <UART_SetConfig+0x1f4>
 8002ca2:	2280      	movs	r2, #128	; 0x80
 8002ca4:	00d2      	lsls	r2, r2, #3
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d00e      	beq.n	8002cc8 <UART_SetConfig+0x210>
 8002caa:	e01b      	b.n	8002ce4 <UART_SetConfig+0x22c>
 8002cac:	231b      	movs	r3, #27
 8002cae:	2220      	movs	r2, #32
 8002cb0:	189b      	adds	r3, r3, r2
 8002cb2:	19db      	adds	r3, r3, r7
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
 8002cb8:	e021      	b.n	8002cfe <UART_SetConfig+0x246>
 8002cba:	231b      	movs	r3, #27
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	189b      	adds	r3, r3, r2
 8002cc0:	19db      	adds	r3, r3, r7
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	e01a      	b.n	8002cfe <UART_SetConfig+0x246>
 8002cc8:	231b      	movs	r3, #27
 8002cca:	2220      	movs	r2, #32
 8002ccc:	189b      	adds	r3, r3, r2
 8002cce:	19db      	adds	r3, r3, r7
 8002cd0:	2204      	movs	r2, #4
 8002cd2:	701a      	strb	r2, [r3, #0]
 8002cd4:	e013      	b.n	8002cfe <UART_SetConfig+0x246>
 8002cd6:	231b      	movs	r3, #27
 8002cd8:	2220      	movs	r2, #32
 8002cda:	189b      	adds	r3, r3, r2
 8002cdc:	19db      	adds	r3, r3, r7
 8002cde:	2208      	movs	r2, #8
 8002ce0:	701a      	strb	r2, [r3, #0]
 8002ce2:	e00c      	b.n	8002cfe <UART_SetConfig+0x246>
 8002ce4:	231b      	movs	r3, #27
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	189b      	adds	r3, r3, r2
 8002cea:	19db      	adds	r3, r3, r7
 8002cec:	2210      	movs	r2, #16
 8002cee:	701a      	strb	r2, [r3, #0]
 8002cf0:	e005      	b.n	8002cfe <UART_SetConfig+0x246>
 8002cf2:	231b      	movs	r3, #27
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	189b      	adds	r3, r3, r2
 8002cf8:	19db      	adds	r3, r3, r7
 8002cfa:	2210      	movs	r2, #16
 8002cfc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a2b      	ldr	r2, [pc, #172]	; (8002db0 <UART_SetConfig+0x2f8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d000      	beq.n	8002d0a <UART_SetConfig+0x252>
 8002d08:	e0a9      	b.n	8002e5e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d0a:	231b      	movs	r3, #27
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	189b      	adds	r3, r3, r2
 8002d10:	19db      	adds	r3, r3, r7
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d015      	beq.n	8002d44 <UART_SetConfig+0x28c>
 8002d18:	dc18      	bgt.n	8002d4c <UART_SetConfig+0x294>
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d00d      	beq.n	8002d3a <UART_SetConfig+0x282>
 8002d1e:	dc15      	bgt.n	8002d4c <UART_SetConfig+0x294>
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <UART_SetConfig+0x272>
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d005      	beq.n	8002d34 <UART_SetConfig+0x27c>
 8002d28:	e010      	b.n	8002d4c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d2a:	f7ff fbfd 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 8002d2e:	0003      	movs	r3, r0
 8002d30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d32:	e014      	b.n	8002d5e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d34:	4b25      	ldr	r3, [pc, #148]	; (8002dcc <UART_SetConfig+0x314>)
 8002d36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d38:	e011      	b.n	8002d5e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d3a:	f7ff fb69 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 8002d3e:	0003      	movs	r3, r0
 8002d40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d42:	e00c      	b.n	8002d5e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d44:	2380      	movs	r3, #128	; 0x80
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d4a:	e008      	b.n	8002d5e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002d50:	231a      	movs	r3, #26
 8002d52:	2220      	movs	r2, #32
 8002d54:	189b      	adds	r3, r3, r2
 8002d56:	19db      	adds	r3, r3, r7
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
        break;
 8002d5c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d100      	bne.n	8002d66 <UART_SetConfig+0x2ae>
 8002d64:	e14b      	b.n	8002ffe <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d6a:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <UART_SetConfig+0x318>)
 8002d6c:	0052      	lsls	r2, r2, #1
 8002d6e:	5ad3      	ldrh	r3, [r2, r3]
 8002d70:	0019      	movs	r1, r3
 8002d72:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d74:	f7fd f9ce 	bl	8000114 <__udivsi3>
 8002d78:	0003      	movs	r3, r0
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	0013      	movs	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	189b      	adds	r3, r3, r2
 8002d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d305      	bcc.n	8002d98 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d91d      	bls.n	8002dd4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002d98:	231a      	movs	r3, #26
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	189b      	adds	r3, r3, r2
 8002d9e:	19db      	adds	r3, r3, r7
 8002da0:	2201      	movs	r2, #1
 8002da2:	701a      	strb	r2, [r3, #0]
 8002da4:	e12b      	b.n	8002ffe <UART_SetConfig+0x546>
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	cfff69f3 	.word	0xcfff69f3
 8002dac:	ffffcfff 	.word	0xffffcfff
 8002db0:	40008000 	.word	0x40008000
 8002db4:	11fff4ff 	.word	0x11fff4ff
 8002db8:	40013800 	.word	0x40013800
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40004400 	.word	0x40004400
 8002dc4:	40004800 	.word	0x40004800
 8002dc8:	40004c00 	.word	0x40004c00
 8002dcc:	00f42400 	.word	0x00f42400
 8002dd0:	080037b8 	.word	0x080037b8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd6:	61bb      	str	r3, [r7, #24]
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61fb      	str	r3, [r7, #28]
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002de0:	4b92      	ldr	r3, [pc, #584]	; (800302c <UART_SetConfig+0x574>)
 8002de2:	0052      	lsls	r2, r2, #1
 8002de4:	5ad3      	ldrh	r3, [r2, r3]
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	69b8      	ldr	r0, [r7, #24]
 8002df2:	69f9      	ldr	r1, [r7, #28]
 8002df4:	f7fd fb04 	bl	8000400 <__aeabi_uldivmod>
 8002df8:	0002      	movs	r2, r0
 8002dfa:	000b      	movs	r3, r1
 8002dfc:	0e11      	lsrs	r1, r2, #24
 8002dfe:	021d      	lsls	r5, r3, #8
 8002e00:	430d      	orrs	r5, r1
 8002e02:	0214      	lsls	r4, r2, #8
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	085b      	lsrs	r3, r3, #1
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68b8      	ldr	r0, [r7, #8]
 8002e12:	68f9      	ldr	r1, [r7, #12]
 8002e14:	1900      	adds	r0, r0, r4
 8002e16:	4169      	adcs	r1, r5
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	603b      	str	r3, [r7, #0]
 8002e1e:	2300      	movs	r3, #0
 8002e20:	607b      	str	r3, [r7, #4]
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f7fd faeb 	bl	8000400 <__aeabi_uldivmod>
 8002e2a:	0002      	movs	r2, r0
 8002e2c:	000b      	movs	r3, r1
 8002e2e:	0013      	movs	r3, r2
 8002e30:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e34:	23c0      	movs	r3, #192	; 0xc0
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d309      	bcc.n	8002e50 <UART_SetConfig+0x398>
 8002e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e3e:	2380      	movs	r3, #128	; 0x80
 8002e40:	035b      	lsls	r3, r3, #13
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d204      	bcs.n	8002e50 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e4c:	60da      	str	r2, [r3, #12]
 8002e4e:	e0d6      	b.n	8002ffe <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002e50:	231a      	movs	r3, #26
 8002e52:	2220      	movs	r2, #32
 8002e54:	189b      	adds	r3, r3, r2
 8002e56:	19db      	adds	r3, r3, r7
 8002e58:	2201      	movs	r2, #1
 8002e5a:	701a      	strb	r2, [r3, #0]
 8002e5c:	e0cf      	b.n	8002ffe <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	69da      	ldr	r2, [r3, #28]
 8002e62:	2380      	movs	r3, #128	; 0x80
 8002e64:	021b      	lsls	r3, r3, #8
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d000      	beq.n	8002e6c <UART_SetConfig+0x3b4>
 8002e6a:	e070      	b.n	8002f4e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002e6c:	231b      	movs	r3, #27
 8002e6e:	2220      	movs	r2, #32
 8002e70:	189b      	adds	r3, r3, r2
 8002e72:	19db      	adds	r3, r3, r7
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d015      	beq.n	8002ea6 <UART_SetConfig+0x3ee>
 8002e7a:	dc18      	bgt.n	8002eae <UART_SetConfig+0x3f6>
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d00d      	beq.n	8002e9c <UART_SetConfig+0x3e4>
 8002e80:	dc15      	bgt.n	8002eae <UART_SetConfig+0x3f6>
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <UART_SetConfig+0x3d4>
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d005      	beq.n	8002e96 <UART_SetConfig+0x3de>
 8002e8a:	e010      	b.n	8002eae <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e8c:	f7ff fb4c 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 8002e90:	0003      	movs	r3, r0
 8002e92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e94:	e014      	b.n	8002ec0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e96:	4b66      	ldr	r3, [pc, #408]	; (8003030 <UART_SetConfig+0x578>)
 8002e98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e9a:	e011      	b.n	8002ec0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e9c:	f7ff fab8 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 8002ea0:	0003      	movs	r3, r0
 8002ea2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ea4:	e00c      	b.n	8002ec0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	021b      	lsls	r3, r3, #8
 8002eaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002eac:	e008      	b.n	8002ec0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002eb2:	231a      	movs	r3, #26
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	189b      	adds	r3, r3, r2
 8002eb8:	19db      	adds	r3, r3, r7
 8002eba:	2201      	movs	r2, #1
 8002ebc:	701a      	strb	r2, [r3, #0]
        break;
 8002ebe:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d100      	bne.n	8002ec8 <UART_SetConfig+0x410>
 8002ec6:	e09a      	b.n	8002ffe <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ecc:	4b57      	ldr	r3, [pc, #348]	; (800302c <UART_SetConfig+0x574>)
 8002ece:	0052      	lsls	r2, r2, #1
 8002ed0:	5ad3      	ldrh	r3, [r2, r3]
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ed6:	f7fd f91d 	bl	8000114 <__udivsi3>
 8002eda:	0003      	movs	r3, r0
 8002edc:	005a      	lsls	r2, r3, #1
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	085b      	lsrs	r3, r3, #1
 8002ee4:	18d2      	adds	r2, r2, r3
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	0019      	movs	r1, r3
 8002eec:	0010      	movs	r0, r2
 8002eee:	f7fd f911 	bl	8000114 <__udivsi3>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	2b0f      	cmp	r3, #15
 8002efa:	d921      	bls.n	8002f40 <UART_SetConfig+0x488>
 8002efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002efe:	2380      	movs	r3, #128	; 0x80
 8002f00:	025b      	lsls	r3, r3, #9
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d21c      	bcs.n	8002f40 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	200e      	movs	r0, #14
 8002f0c:	2420      	movs	r4, #32
 8002f0e:	1903      	adds	r3, r0, r4
 8002f10:	19db      	adds	r3, r3, r7
 8002f12:	210f      	movs	r1, #15
 8002f14:	438a      	bics	r2, r1
 8002f16:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2207      	movs	r2, #7
 8002f20:	4013      	ands	r3, r2
 8002f22:	b299      	uxth	r1, r3
 8002f24:	1903      	adds	r3, r0, r4
 8002f26:	19db      	adds	r3, r3, r7
 8002f28:	1902      	adds	r2, r0, r4
 8002f2a:	19d2      	adds	r2, r2, r7
 8002f2c:	8812      	ldrh	r2, [r2, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	1902      	adds	r2, r0, r4
 8002f38:	19d2      	adds	r2, r2, r7
 8002f3a:	8812      	ldrh	r2, [r2, #0]
 8002f3c:	60da      	str	r2, [r3, #12]
 8002f3e:	e05e      	b.n	8002ffe <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002f40:	231a      	movs	r3, #26
 8002f42:	2220      	movs	r2, #32
 8002f44:	189b      	adds	r3, r3, r2
 8002f46:	19db      	adds	r3, r3, r7
 8002f48:	2201      	movs	r2, #1
 8002f4a:	701a      	strb	r2, [r3, #0]
 8002f4c:	e057      	b.n	8002ffe <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f4e:	231b      	movs	r3, #27
 8002f50:	2220      	movs	r2, #32
 8002f52:	189b      	adds	r3, r3, r2
 8002f54:	19db      	adds	r3, r3, r7
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d015      	beq.n	8002f88 <UART_SetConfig+0x4d0>
 8002f5c:	dc18      	bgt.n	8002f90 <UART_SetConfig+0x4d8>
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d00d      	beq.n	8002f7e <UART_SetConfig+0x4c6>
 8002f62:	dc15      	bgt.n	8002f90 <UART_SetConfig+0x4d8>
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <UART_SetConfig+0x4b6>
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d005      	beq.n	8002f78 <UART_SetConfig+0x4c0>
 8002f6c:	e010      	b.n	8002f90 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f6e:	f7ff fadb 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 8002f72:	0003      	movs	r3, r0
 8002f74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f76:	e014      	b.n	8002fa2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f78:	4b2d      	ldr	r3, [pc, #180]	; (8003030 <UART_SetConfig+0x578>)
 8002f7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f7c:	e011      	b.n	8002fa2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f7e:	f7ff fa47 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 8002f82:	0003      	movs	r3, r0
 8002f84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f86:	e00c      	b.n	8002fa2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f8e:	e008      	b.n	8002fa2 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002f94:	231a      	movs	r3, #26
 8002f96:	2220      	movs	r2, #32
 8002f98:	189b      	adds	r3, r3, r2
 8002f9a:	19db      	adds	r3, r3, r7
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	701a      	strb	r2, [r3, #0]
        break;
 8002fa0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d02a      	beq.n	8002ffe <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fac:	4b1f      	ldr	r3, [pc, #124]	; (800302c <UART_SetConfig+0x574>)
 8002fae:	0052      	lsls	r2, r2, #1
 8002fb0:	5ad3      	ldrh	r3, [r2, r3]
 8002fb2:	0019      	movs	r1, r3
 8002fb4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002fb6:	f7fd f8ad 	bl	8000114 <__udivsi3>
 8002fba:	0003      	movs	r3, r0
 8002fbc:	001a      	movs	r2, r3
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	085b      	lsrs	r3, r3, #1
 8002fc4:	18d2      	adds	r2, r2, r3
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	0019      	movs	r1, r3
 8002fcc:	0010      	movs	r0, r2
 8002fce:	f7fd f8a1 	bl	8000114 <__udivsi3>
 8002fd2:	0003      	movs	r3, r0
 8002fd4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	2b0f      	cmp	r3, #15
 8002fda:	d90a      	bls.n	8002ff2 <UART_SetConfig+0x53a>
 8002fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fde:	2380      	movs	r3, #128	; 0x80
 8002fe0:	025b      	lsls	r3, r3, #9
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d205      	bcs.n	8002ff2 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60da      	str	r2, [r3, #12]
 8002ff0:	e005      	b.n	8002ffe <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002ff2:	231a      	movs	r3, #26
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	189b      	adds	r3, r3, r2
 8002ff8:	19db      	adds	r3, r3, r7
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	226a      	movs	r2, #106	; 0x6a
 8003002:	2101      	movs	r1, #1
 8003004:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	2268      	movs	r2, #104	; 0x68
 800300a:	2101      	movs	r1, #1
 800300c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	2200      	movs	r2, #0
 8003012:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	2200      	movs	r2, #0
 8003018:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800301a:	231a      	movs	r3, #26
 800301c:	2220      	movs	r2, #32
 800301e:	189b      	adds	r3, r3, r2
 8003020:	19db      	adds	r3, r3, r7
 8003022:	781b      	ldrb	r3, [r3, #0]
}
 8003024:	0018      	movs	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	b010      	add	sp, #64	; 0x40
 800302a:	bdb0      	pop	{r4, r5, r7, pc}
 800302c:	080037b8 	.word	0x080037b8
 8003030:	00f42400 	.word	0x00f42400

08003034 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	2208      	movs	r2, #8
 8003042:	4013      	ands	r3, r2
 8003044:	d00b      	beq.n	800305e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	4a4a      	ldr	r2, [pc, #296]	; (8003178 <UART_AdvFeatureConfig+0x144>)
 800304e:	4013      	ands	r3, r2
 8003050:	0019      	movs	r1, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003062:	2201      	movs	r2, #1
 8003064:	4013      	ands	r3, r2
 8003066:	d00b      	beq.n	8003080 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4a43      	ldr	r2, [pc, #268]	; (800317c <UART_AdvFeatureConfig+0x148>)
 8003070:	4013      	ands	r3, r2
 8003072:	0019      	movs	r1, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	2202      	movs	r2, #2
 8003086:	4013      	ands	r3, r2
 8003088:	d00b      	beq.n	80030a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4a3b      	ldr	r2, [pc, #236]	; (8003180 <UART_AdvFeatureConfig+0x14c>)
 8003092:	4013      	ands	r3, r2
 8003094:	0019      	movs	r1, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a6:	2204      	movs	r2, #4
 80030a8:	4013      	ands	r3, r2
 80030aa:	d00b      	beq.n	80030c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4a34      	ldr	r2, [pc, #208]	; (8003184 <UART_AdvFeatureConfig+0x150>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	0019      	movs	r1, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	2210      	movs	r2, #16
 80030ca:	4013      	ands	r3, r2
 80030cc:	d00b      	beq.n	80030e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	4a2c      	ldr	r2, [pc, #176]	; (8003188 <UART_AdvFeatureConfig+0x154>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	0019      	movs	r1, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	2220      	movs	r2, #32
 80030ec:	4013      	ands	r3, r2
 80030ee:	d00b      	beq.n	8003108 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	4a25      	ldr	r2, [pc, #148]	; (800318c <UART_AdvFeatureConfig+0x158>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	0019      	movs	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310c:	2240      	movs	r2, #64	; 0x40
 800310e:	4013      	ands	r3, r2
 8003110:	d01d      	beq.n	800314e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4a1d      	ldr	r2, [pc, #116]	; (8003190 <UART_AdvFeatureConfig+0x15c>)
 800311a:	4013      	ands	r3, r2
 800311c:	0019      	movs	r1, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	035b      	lsls	r3, r3, #13
 8003132:	429a      	cmp	r2, r3
 8003134:	d10b      	bne.n	800314e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	4a15      	ldr	r2, [pc, #84]	; (8003194 <UART_AdvFeatureConfig+0x160>)
 800313e:	4013      	ands	r3, r2
 8003140:	0019      	movs	r1, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	2280      	movs	r2, #128	; 0x80
 8003154:	4013      	ands	r3, r2
 8003156:	d00b      	beq.n	8003170 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4a0e      	ldr	r2, [pc, #56]	; (8003198 <UART_AdvFeatureConfig+0x164>)
 8003160:	4013      	ands	r3, r2
 8003162:	0019      	movs	r1, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	605a      	str	r2, [r3, #4]
  }
}
 8003170:	46c0      	nop			; (mov r8, r8)
 8003172:	46bd      	mov	sp, r7
 8003174:	b002      	add	sp, #8
 8003176:	bd80      	pop	{r7, pc}
 8003178:	ffff7fff 	.word	0xffff7fff
 800317c:	fffdffff 	.word	0xfffdffff
 8003180:	fffeffff 	.word	0xfffeffff
 8003184:	fffbffff 	.word	0xfffbffff
 8003188:	ffffefff 	.word	0xffffefff
 800318c:	ffffdfff 	.word	0xffffdfff
 8003190:	ffefffff 	.word	0xffefffff
 8003194:	ff9fffff 	.word	0xff9fffff
 8003198:	fff7ffff 	.word	0xfff7ffff

0800319c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b092      	sub	sp, #72	; 0x48
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2290      	movs	r2, #144	; 0x90
 80031a8:	2100      	movs	r1, #0
 80031aa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031ac:	f7fd fda2 	bl	8000cf4 <HAL_GetTick>
 80031b0:	0003      	movs	r3, r0
 80031b2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2208      	movs	r2, #8
 80031bc:	4013      	ands	r3, r2
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d12d      	bne.n	800321e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c4:	2280      	movs	r2, #128	; 0x80
 80031c6:	0391      	lsls	r1, r2, #14
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	4a47      	ldr	r2, [pc, #284]	; (80032e8 <UART_CheckIdleState+0x14c>)
 80031cc:	9200      	str	r2, [sp, #0]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f000 f88e 	bl	80032f0 <UART_WaitOnFlagUntilTimeout>
 80031d4:	1e03      	subs	r3, r0, #0
 80031d6:	d022      	beq.n	800321e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031d8:	f3ef 8310 	mrs	r3, PRIMASK
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80031e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80031e2:	2301      	movs	r3, #1
 80031e4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e8:	f383 8810 	msr	PRIMASK, r3
}
 80031ec:	46c0      	nop			; (mov r8, r8)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2180      	movs	r1, #128	; 0x80
 80031fa:	438a      	bics	r2, r1
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003200:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003204:	f383 8810 	msr	PRIMASK, r3
}
 8003208:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2288      	movs	r2, #136	; 0x88
 800320e:	2120      	movs	r1, #32
 8003210:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2284      	movs	r2, #132	; 0x84
 8003216:	2100      	movs	r1, #0
 8003218:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e060      	b.n	80032e0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2204      	movs	r2, #4
 8003226:	4013      	ands	r3, r2
 8003228:	2b04      	cmp	r3, #4
 800322a:	d146      	bne.n	80032ba <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800322c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800322e:	2280      	movs	r2, #128	; 0x80
 8003230:	03d1      	lsls	r1, r2, #15
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	4a2c      	ldr	r2, [pc, #176]	; (80032e8 <UART_CheckIdleState+0x14c>)
 8003236:	9200      	str	r2, [sp, #0]
 8003238:	2200      	movs	r2, #0
 800323a:	f000 f859 	bl	80032f0 <UART_WaitOnFlagUntilTimeout>
 800323e:	1e03      	subs	r3, r0, #0
 8003240:	d03b      	beq.n	80032ba <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003242:	f3ef 8310 	mrs	r3, PRIMASK
 8003246:	60fb      	str	r3, [r7, #12]
  return(result);
 8003248:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800324a:	637b      	str	r3, [r7, #52]	; 0x34
 800324c:	2301      	movs	r3, #1
 800324e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f383 8810 	msr	PRIMASK, r3
}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4922      	ldr	r1, [pc, #136]	; (80032ec <UART_CheckIdleState+0x150>)
 8003264:	400a      	ands	r2, r1
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800326a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f383 8810 	msr	PRIMASK, r3
}
 8003272:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003274:	f3ef 8310 	mrs	r3, PRIMASK
 8003278:	61bb      	str	r3, [r7, #24]
  return(result);
 800327a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800327c:	633b      	str	r3, [r7, #48]	; 0x30
 800327e:	2301      	movs	r3, #1
 8003280:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	f383 8810 	msr	PRIMASK, r3
}
 8003288:	46c0      	nop			; (mov r8, r8)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2101      	movs	r1, #1
 8003296:	438a      	bics	r2, r1
 8003298:	609a      	str	r2, [r3, #8]
 800329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	f383 8810 	msr	PRIMASK, r3
}
 80032a4:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	228c      	movs	r2, #140	; 0x8c
 80032aa:	2120      	movs	r1, #32
 80032ac:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2284      	movs	r2, #132	; 0x84
 80032b2:	2100      	movs	r1, #0
 80032b4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e012      	b.n	80032e0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2288      	movs	r2, #136	; 0x88
 80032be:	2120      	movs	r1, #32
 80032c0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	228c      	movs	r2, #140	; 0x8c
 80032c6:	2120      	movs	r1, #32
 80032c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2284      	movs	r2, #132	; 0x84
 80032da:	2100      	movs	r1, #0
 80032dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	0018      	movs	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b010      	add	sp, #64	; 0x40
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	01ffffff 	.word	0x01ffffff
 80032ec:	fffffedf 	.word	0xfffffedf

080032f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	1dfb      	adds	r3, r7, #7
 80032fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003300:	e051      	b.n	80033a6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	3301      	adds	r3, #1
 8003306:	d04e      	beq.n	80033a6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003308:	f7fd fcf4 	bl	8000cf4 <HAL_GetTick>
 800330c:	0002      	movs	r2, r0
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	429a      	cmp	r2, r3
 8003316:	d302      	bcc.n	800331e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e051      	b.n	80033c6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2204      	movs	r2, #4
 800332a:	4013      	ands	r3, r2
 800332c:	d03b      	beq.n	80033a6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2b80      	cmp	r3, #128	; 0x80
 8003332:	d038      	beq.n	80033a6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2b40      	cmp	r3, #64	; 0x40
 8003338:	d035      	beq.n	80033a6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	2208      	movs	r2, #8
 8003342:	4013      	ands	r3, r2
 8003344:	2b08      	cmp	r3, #8
 8003346:	d111      	bne.n	800336c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2208      	movs	r2, #8
 800334e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	0018      	movs	r0, r3
 8003354:	f000 f83c 	bl	80033d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2290      	movs	r2, #144	; 0x90
 800335c:	2108      	movs	r1, #8
 800335e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2284      	movs	r2, #132	; 0x84
 8003364:	2100      	movs	r1, #0
 8003366:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e02c      	b.n	80033c6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	69da      	ldr	r2, [r3, #28]
 8003372:	2380      	movs	r3, #128	; 0x80
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	401a      	ands	r2, r3
 8003378:	2380      	movs	r3, #128	; 0x80
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	429a      	cmp	r2, r3
 800337e:	d112      	bne.n	80033a6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2280      	movs	r2, #128	; 0x80
 8003386:	0112      	lsls	r2, r2, #4
 8003388:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	0018      	movs	r0, r3
 800338e:	f000 f81f 	bl	80033d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2290      	movs	r2, #144	; 0x90
 8003396:	2120      	movs	r1, #32
 8003398:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2284      	movs	r2, #132	; 0x84
 800339e:	2100      	movs	r1, #0
 80033a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e00f      	b.n	80033c6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	4013      	ands	r3, r2
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	425a      	negs	r2, r3
 80033b6:	4153      	adcs	r3, r2
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	001a      	movs	r2, r3
 80033bc:	1dfb      	adds	r3, r7, #7
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d09e      	beq.n	8003302 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	0018      	movs	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	b004      	add	sp, #16
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08e      	sub	sp, #56	; 0x38
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033d8:	f3ef 8310 	mrs	r3, PRIMASK
 80033dc:	617b      	str	r3, [r7, #20]
  return(result);
 80033de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80033e0:	637b      	str	r3, [r7, #52]	; 0x34
 80033e2:	2301      	movs	r3, #1
 80033e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	f383 8810 	msr	PRIMASK, r3
}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4926      	ldr	r1, [pc, #152]	; (8003494 <UART_EndRxTransfer+0xc4>)
 80033fa:	400a      	ands	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003400:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f383 8810 	msr	PRIMASK, r3
}
 8003408:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800340a:	f3ef 8310 	mrs	r3, PRIMASK
 800340e:	623b      	str	r3, [r7, #32]
  return(result);
 8003410:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003412:	633b      	str	r3, [r7, #48]	; 0x30
 8003414:	2301      	movs	r3, #1
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	f383 8810 	msr	PRIMASK, r3
}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	491b      	ldr	r1, [pc, #108]	; (8003498 <UART_EndRxTransfer+0xc8>)
 800342c:	400a      	ands	r2, r1
 800342e:	609a      	str	r2, [r3, #8]
 8003430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003432:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003436:	f383 8810 	msr	PRIMASK, r3
}
 800343a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003440:	2b01      	cmp	r3, #1
 8003442:	d118      	bne.n	8003476 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003444:	f3ef 8310 	mrs	r3, PRIMASK
 8003448:	60bb      	str	r3, [r7, #8]
  return(result);
 800344a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800344e:	2301      	movs	r3, #1
 8003450:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f383 8810 	msr	PRIMASK, r3
}
 8003458:	46c0      	nop			; (mov r8, r8)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2110      	movs	r1, #16
 8003466:	438a      	bics	r2, r1
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f383 8810 	msr	PRIMASK, r3
}
 8003474:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	228c      	movs	r2, #140	; 0x8c
 800347a:	2120      	movs	r1, #32
 800347c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	675a      	str	r2, [r3, #116]	; 0x74
}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	46bd      	mov	sp, r7
 800348e:	b00e      	add	sp, #56	; 0x38
 8003490:	bd80      	pop	{r7, pc}
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	fffffedf 	.word	0xfffffedf
 8003498:	effffffe 	.word	0xeffffffe

0800349c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2284      	movs	r2, #132	; 0x84
 80034a8:	5c9b      	ldrb	r3, [r3, r2]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e027      	b.n	8003502 <HAL_UARTEx_DisableFifoMode+0x66>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2284      	movs	r2, #132	; 0x84
 80034b6:	2101      	movs	r1, #1
 80034b8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2288      	movs	r2, #136	; 0x88
 80034be:	2124      	movs	r1, #36	; 0x24
 80034c0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2101      	movs	r1, #1
 80034d6:	438a      	bics	r2, r1
 80034d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4a0b      	ldr	r2, [pc, #44]	; (800350c <HAL_UARTEx_DisableFifoMode+0x70>)
 80034de:	4013      	ands	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2288      	movs	r2, #136	; 0x88
 80034f4:	2120      	movs	r1, #32
 80034f6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2284      	movs	r2, #132	; 0x84
 80034fc:	2100      	movs	r1, #0
 80034fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	0018      	movs	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	b004      	add	sp, #16
 8003508:	bd80      	pop	{r7, pc}
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	dfffffff 	.word	0xdfffffff

08003510 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2284      	movs	r2, #132	; 0x84
 800351e:	5c9b      	ldrb	r3, [r3, r2]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003524:	2302      	movs	r3, #2
 8003526:	e02e      	b.n	8003586 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2284      	movs	r2, #132	; 0x84
 800352c:	2101      	movs	r1, #1
 800352e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2288      	movs	r2, #136	; 0x88
 8003534:	2124      	movs	r1, #36	; 0x24
 8003536:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2101      	movs	r1, #1
 800354c:	438a      	bics	r2, r1
 800354e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	08d9      	lsrs	r1, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	0018      	movs	r0, r3
 8003568:	f000 f854 	bl	8003614 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2288      	movs	r2, #136	; 0x88
 8003578:	2120      	movs	r1, #32
 800357a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2284      	movs	r2, #132	; 0x84
 8003580:	2100      	movs	r1, #0
 8003582:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	0018      	movs	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	b004      	add	sp, #16
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2284      	movs	r2, #132	; 0x84
 800359e:	5c9b      	ldrb	r3, [r3, r2]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e02f      	b.n	8003608 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2284      	movs	r2, #132	; 0x84
 80035ac:	2101      	movs	r1, #1
 80035ae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2288      	movs	r2, #136	; 0x88
 80035b4:	2124      	movs	r1, #36	; 0x24
 80035b6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2101      	movs	r1, #1
 80035cc:	438a      	bics	r2, r1
 80035ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	4a0e      	ldr	r2, [pc, #56]	; (8003610 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80035d8:	4013      	ands	r3, r2
 80035da:	0019      	movs	r1, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	0018      	movs	r0, r3
 80035ea:	f000 f813 	bl	8003614 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2288      	movs	r2, #136	; 0x88
 80035fa:	2120      	movs	r1, #32
 80035fc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2284      	movs	r2, #132	; 0x84
 8003602:	2100      	movs	r1, #0
 8003604:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	0018      	movs	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	b004      	add	sp, #16
 800360e:	bd80      	pop	{r7, pc}
 8003610:	f1ffffff 	.word	0xf1ffffff

08003614 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003620:	2b00      	cmp	r3, #0
 8003622:	d108      	bne.n	8003636 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	226a      	movs	r2, #106	; 0x6a
 8003628:	2101      	movs	r1, #1
 800362a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2268      	movs	r2, #104	; 0x68
 8003630:	2101      	movs	r1, #1
 8003632:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003634:	e043      	b.n	80036be <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003636:	260f      	movs	r6, #15
 8003638:	19bb      	adds	r3, r7, r6
 800363a:	2208      	movs	r2, #8
 800363c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800363e:	200e      	movs	r0, #14
 8003640:	183b      	adds	r3, r7, r0
 8003642:	2208      	movs	r2, #8
 8003644:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	0e5b      	lsrs	r3, r3, #25
 800364e:	b2da      	uxtb	r2, r3
 8003650:	240d      	movs	r4, #13
 8003652:	193b      	adds	r3, r7, r4
 8003654:	2107      	movs	r1, #7
 8003656:	400a      	ands	r2, r1
 8003658:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	0f5b      	lsrs	r3, r3, #29
 8003662:	b2da      	uxtb	r2, r3
 8003664:	250c      	movs	r5, #12
 8003666:	197b      	adds	r3, r7, r5
 8003668:	2107      	movs	r1, #7
 800366a:	400a      	ands	r2, r1
 800366c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800366e:	183b      	adds	r3, r7, r0
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	197a      	adds	r2, r7, r5
 8003674:	7812      	ldrb	r2, [r2, #0]
 8003676:	4914      	ldr	r1, [pc, #80]	; (80036c8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003678:	5c8a      	ldrb	r2, [r1, r2]
 800367a:	435a      	muls	r2, r3
 800367c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800367e:	197b      	adds	r3, r7, r5
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	4a12      	ldr	r2, [pc, #72]	; (80036cc <UARTEx_SetNbDataToProcess+0xb8>)
 8003684:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003686:	0019      	movs	r1, r3
 8003688:	f7fc fdce 	bl	8000228 <__divsi3>
 800368c:	0003      	movs	r3, r0
 800368e:	b299      	uxth	r1, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	226a      	movs	r2, #106	; 0x6a
 8003694:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003696:	19bb      	adds	r3, r7, r6
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	193a      	adds	r2, r7, r4
 800369c:	7812      	ldrb	r2, [r2, #0]
 800369e:	490a      	ldr	r1, [pc, #40]	; (80036c8 <UARTEx_SetNbDataToProcess+0xb4>)
 80036a0:	5c8a      	ldrb	r2, [r1, r2]
 80036a2:	435a      	muls	r2, r3
 80036a4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80036a6:	193b      	adds	r3, r7, r4
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	4a08      	ldr	r2, [pc, #32]	; (80036cc <UARTEx_SetNbDataToProcess+0xb8>)
 80036ac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80036ae:	0019      	movs	r1, r3
 80036b0:	f7fc fdba 	bl	8000228 <__divsi3>
 80036b4:	0003      	movs	r3, r0
 80036b6:	b299      	uxth	r1, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2268      	movs	r2, #104	; 0x68
 80036bc:	5299      	strh	r1, [r3, r2]
}
 80036be:	46c0      	nop			; (mov r8, r8)
 80036c0:	46bd      	mov	sp, r7
 80036c2:	b005      	add	sp, #20
 80036c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	080037d0 	.word	0x080037d0
 80036cc:	080037d8 	.word	0x080037d8

080036d0 <memset>:
 80036d0:	0003      	movs	r3, r0
 80036d2:	1882      	adds	r2, r0, r2
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d100      	bne.n	80036da <memset+0xa>
 80036d8:	4770      	bx	lr
 80036da:	7019      	strb	r1, [r3, #0]
 80036dc:	3301      	adds	r3, #1
 80036de:	e7f9      	b.n	80036d4 <memset+0x4>

080036e0 <__libc_init_array>:
 80036e0:	b570      	push	{r4, r5, r6, lr}
 80036e2:	2600      	movs	r6, #0
 80036e4:	4c0c      	ldr	r4, [pc, #48]	; (8003718 <__libc_init_array+0x38>)
 80036e6:	4d0d      	ldr	r5, [pc, #52]	; (800371c <__libc_init_array+0x3c>)
 80036e8:	1b64      	subs	r4, r4, r5
 80036ea:	10a4      	asrs	r4, r4, #2
 80036ec:	42a6      	cmp	r6, r4
 80036ee:	d109      	bne.n	8003704 <__libc_init_array+0x24>
 80036f0:	2600      	movs	r6, #0
 80036f2:	f000 f819 	bl	8003728 <_init>
 80036f6:	4c0a      	ldr	r4, [pc, #40]	; (8003720 <__libc_init_array+0x40>)
 80036f8:	4d0a      	ldr	r5, [pc, #40]	; (8003724 <__libc_init_array+0x44>)
 80036fa:	1b64      	subs	r4, r4, r5
 80036fc:	10a4      	asrs	r4, r4, #2
 80036fe:	42a6      	cmp	r6, r4
 8003700:	d105      	bne.n	800370e <__libc_init_array+0x2e>
 8003702:	bd70      	pop	{r4, r5, r6, pc}
 8003704:	00b3      	lsls	r3, r6, #2
 8003706:	58eb      	ldr	r3, [r5, r3]
 8003708:	4798      	blx	r3
 800370a:	3601      	adds	r6, #1
 800370c:	e7ee      	b.n	80036ec <__libc_init_array+0xc>
 800370e:	00b3      	lsls	r3, r6, #2
 8003710:	58eb      	ldr	r3, [r5, r3]
 8003712:	4798      	blx	r3
 8003714:	3601      	adds	r6, #1
 8003716:	e7f2      	b.n	80036fe <__libc_init_array+0x1e>
 8003718:	080037e8 	.word	0x080037e8
 800371c:	080037e8 	.word	0x080037e8
 8003720:	080037ec 	.word	0x080037ec
 8003724:	080037e8 	.word	0x080037e8

08003728 <_init>:
 8003728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372e:	bc08      	pop	{r3}
 8003730:	469e      	mov	lr, r3
 8003732:	4770      	bx	lr

08003734 <_fini>:
 8003734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800373a:	bc08      	pop	{r3}
 800373c:	469e      	mov	lr, r3
 800373e:	4770      	bx	lr
